-- FreeFem++ v4.700001 (Sat Oct 17 12:48:33 CEST 2020 - git v4.7-64-g08041365)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : ////////////////////////////////////////////////
    2 : // Compliance Optimization                    //
    3 : // by the boundary variation method           //
    4 : // Copyright O.Pantz, G. Allaire (2005)       //
    5 : ////////////////////////////////////////////////
    6 : 
    7 : // Optimization Parameters 
    8 : int niter=60;			//Number of iterations
    9 : real errelas=0.01;		//Error for the resolution of the variational problems
   10 : real metricmsh=5.;		//Metric used for the coarse mesh: Bigger=finer mesh
   11 : real initialstep=0.2;		//Initial step
   12 : real maxstep=-1.;		//Maximum step (<0 => no limit)
   13 : real lagrangestep=3.;		//Updating step of the Lagrange multiplier associated to the Volume's constraint
   14 : bool tocontinue=false;		//false=start a new computation, true=continue a previous computation
   15 : string backupname="output";	//Name under which the results are stored
   16 : int nsave=1;			//Number of iterations to be saved
   17 : real volume0=95.;		//=0 Constant Volume during the iterations, >0 Target Volume, <0 No Volume's constraint
   18 : 
   19 : int np =10;
   20 : // construction of the initial mesh
   21 : 	mesh Sh,Th,Shprev,Thprev;
   22 : 	//Definition of the boundary labels
   23 : 	int neumann=1; int dirichlet=2;
   24 : 	int free=3;
   25 : 
   26 : 
   27 : 	int WALL = 1;
   28 : 	int LOAD = 2;
   29 : 	int FREE = 3;
   30 : //this is case 1
   31 : 	
   32 :  // border L11(t = 0.0, 0.5){x = t; y = 0.0; label = FREE;}
   33 :  //    border L21(t = 0.0, 0.45){x = 0.5; y = t; label = FREE;}
   34 :  //    border L22(t = 0.45, 0.55){x = 0.5; y = t; label = LOAD;}
   35 :  //    border L23(t = 0.55, 1.0){x = 0.5; y = t; label = FREE;}
   36 :  //    border L31(t = 0.5, 0){x = t; y = 1.0; label = FREE;}
   37 :  //    border L41(t = 1.0, 0.9){x = 0.0; y = t; label = WALL;}
   38 :  //    border L42(t = 0.9, 0.1){x = 0.0; y = t; label = FREE;}
   39 :  //    border L43(t = 0.1, 0.0){x = 0.0; y = t; label = WALL;}
   40 : 
   41 :  //    Sh = buildmesh(L11(5 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(5 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np));
   42 : 
   43 : 
   44 : //this is case 2
   45 : 
   46 : 	real r = 0.15;                                                                    
   47 : 
   48 :     border L11(t = -1.0, 1.0){x = t; y = 0.0; label = FREE;}
   49 :     border L21(t = 0.0, 0.45){x = 1.0; y = t; label = FREE;}
   50 :     border L22(t = 0.45, 0.55){x = 1.0; y = t; label = LOAD;}
   51 :     border L23(t = 0.55, 1.0){x = 1.0; y = t; label = FREE;}
   52 :     border L31(t = 1.0, -1.0){x = t; y = 1.0; label = FREE;}
   53 :     border L41(t = 1.0, 0.9){x = -1.0; y = t; label = WALL;}
   54 :     border L42(t = 0.9, 0.1){x = -1.0; y = t; label = FREE;}
   55 :     border L43(t = 0.1, 0.0){x = -1.0; y = t; label = WALL;}
   56 : 
   57 :     
   58 :     border C11(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   59 :     border C12(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   60 :     border C21(t = 0, 2 * pi){x = -0.2 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   61 :     border C22(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   62 :     border C31(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   63 :     border C32(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   64 : 
   65 :     Sh = buildmesh(L11(20 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(20 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np)
   66 :                     + C11(-10 * np) + C12(-10 * np)  + C21(-10 * np) + C22(-10 * np) + C31(-10 * np) + C32(-10 * np));
   67 : 
   68 : 
   69 : //this is case 3
   70 : 
   71 : 	 // real r = 0.2;                                                 
   72 : 
   73 :   //   border L11(t = 0.0, 1.0){x = t; y = 0.0; label = FREE;}
   74 :   //   border L21(t = 0.0, 0.2){x = 1.0; y = t; label = LOAD;}
   75 :   //   border L22(t = 0.2, 0.8){x = 1.0; y = t; label = FREE;}
   76 :   //   border L23(t = 0.8, 1.0){x = 1.0; y = t; label = LOAD;}
   77 :   //   border L31(t = 1.0, 0.0){x = t; y = 1.0; label = FREE;}
   78 :   //   border L41(t = 1.0, 0.95){x = 0.0; y = t; label = WALL;}
   79 :   //   border L42(t = 0.95, 0.05){x = 0.0; y = t; label = FREE;}
   80 :   //   border L43(t = 0.05, 0.0){x = 0.0; y = t; label = WALL;}
   81 : 
   82 :     
   83 :   //   border C11(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.25 + r * sin(t); label = FREE;}
   84 :   //   border C31(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.75 + r * sin(t); label = FREE;}
   85 : 
   86 :   //   Sh = buildmesh(L11(10 * np) + L21(2 * np) + L22(6 * np) + L23(2 * np) + L31(10 * np) + L41(1 * np) + L42(9 * np) + L43(1 * np)
   87 :   //       + C11(-15 * np) + C31(-15 * np)
   88 :   //       );
   89 : 
   90 : 
   91 : //this is case 4:
   92 : 
   93 : 	 // real r = 0.25;
   94 : 
   95 :   //   border L11(t = -1.0, -0.9){x = t; y = 0; label = FREE;}
   96 :   //   border L12(t = -0.9, -0.2){x = t; y = 0; label = FREE;}
   97 :   //   border L13(t = -0.2, 0.2){x = t; y = 0; label = FREE;}
   98 :   //   border L14(t = 0.2, 0.9){x = t; y = 0; label = FREE;}
   99 :   //   border L15(t = 0.9, 1.0){x = t; y = 0; label = FREE;}
  100 :     
  101 :   //   border L21(t = 0, 1.2){x = 1.0; y = t; label = FREE;}
  102 :   //   border L22(t = 1.0, -1.0){x = t; y = 1.2; label = FREE;}
  103 :   //   border L23(t = 1.2, 0){x = -1.0; y = t; label = FREE;}
  104 :     
  105 :   //   border C10(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  106 :   //   border C11(t = 0, 2 * pi){x = r * cos(t); y = 0.8 + r * sin(t); label = FREE;}
  107 :   //   border C12(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  108 : 
  109 :   //   Sh = buildmesh(L11(1 * np) + L12(7 * np) + L13(4 * np) + L14(7 * np) + L15(1 * np) + L21(12 * np) + L22(20 * np) + L23(12 * np) 
  110 :   //       + C10(-15 * np) + C11(-15 * np) + C12(-15 * np) 
  111 :   //       );
  112 : 
  113 : 
  114 : //this is case 5
  115 : // real r = 0.05;
  116 : 
  117 : //     border L11(t = 0.4, -0.4){x = t; y = 1.2; label = FREE;}
  118 : //     border L21(t = 1.2, 0.8){x = -0.4; y = t; label = FREE;}
  119 : //     border L31(t = -0.4, -0.35){x = t; y = 0.8; label = LOAD;}
  120 : //     border L32(t = -0.35, -0.2){x = t; y = 0.8; label = FREE;}
  121 : //     border L41(t = 0.8, 0.0){x = -0.2; y = t; label = FREE;}
  122 : //     border L51(t = -0.2, -0.15){x = t; y = 0.0; label = WALL;}
  123 : //     border L52(t = -0.15, 0.15){x = t; y = 0.0; label = FREE;}
  124 : //     border L53(t = 0.15, 0.2){x = t; y = 0.0; label = WALL;}
  125 : //     border L42(t = 0.0, 0.8){x = 0.2; y = t; label = FREE;}
  126 : //     border L33(t = 0.2, 0.35){x = t; y = 0.8; label = FREE;}
  127 : //     border L34(t = 0.35, 0.4){x = t; y = 0.8; label = LOAD;}
  128 : //     border L22(t = 0.8, 1.2){x = 0.4; y = t; label = FREE;}
  129 : 
  130 : //     border C1(t = 0, 2 * pi){x = -0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  131 : //     border C2(t = 0, 2 * pi){x = r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  132 : //     border C3(t = 0, 2 * pi){x = 0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  133 : 
  134 : //     Sh = buildmesh(L11(8 * np) + L21(4 * np) + L31(1 * np) + L32(2 * np) + L41(8 * np) + L51(np) + L52(3 * np) + L53(1 * np) 
  135 : //                     + L42(8 * np) + L33(2 * np) + L34(1 * np) + L22(4 * np) + C1(-7 * np) + C2(-7 * np) + C3(-7 * np));
  136 : 
  137 : 
  138 : 
  139 : // 	Th=Sh;
  140 : // 	Thprev=Th;
  141 : 
  142 : 	// cut function used to regularize the gradient shape near singularities
  143 : 	// func cut=1-(x>19.5)*(abs(y)<1.5)-(x<0.5)*(y>1.5)*(y<4.5)-(x<0.5)*(y<-1.5)*(y>-4.5);
  144 : 
  145 : 
  146 : 	func cut=(abs(x) > 0.3) ;
  147 : 
  148 : // Material parameters
  149 : 	real E=15.;				//Young Modulus (always positif)
  150 : 	real nu=0.35;				//Poisson ratio (between -1 and 1/2)
  151 : 	real lambda=E*nu/((1.+nu)*(1.-2.*nu));	//Lame Moduli
  152 : 	real mu=E/(2.*(1.+nu));
  153 : 
  154 : //Applied Loads
  155 : 	func g1=50; func g2=0;
  156 : 
  157 : //Definition of the variables and intialization
  158 : 	//Finite elements spaces on the finer mesh Sh
  159 : 		fespace Wh(Sh,P1);  		
  160 : 		fespace WSh(Sh,[P2,P2]);
  161 : 	//Finite elements spaces on the coarse mesh Th
  162 : 		fespace WTh(Th,[P2,P2]);	
  163 : 		
  164 : 	Wh gradient; 			//Gradient
  165 : 	WSh [d1,d2];			//extension field
  166 : 	WSh [theta1,theta2];		//test functions for the extension field
  167 : 	WSh [u1,u2],[v1,v2];		//Displacement and Test functions
  168 : 
  169 : 	//Interpolated Finite elements on the coarse mesh
  170 : 	WTh [D1,D2],[Dprev1,Dprev2]; 
  171 : 	WTh [U1,U2],[Uprev1,Uprev2];
  172 : 
  173 : 	int nsaved=0;			//Initialization counter of the back-up copies
  174 : 	int nsave0=100;			//Current number of back-up copies
  175 : 	real compliance;		//Compliance
  176 : 	real volume;
 *** Warning  The identifier volume hide a Global identifier  
			//Volume of the current shape
  177 : 	real perimeter;			//Perimeter of the optimized boundary
  178 : 	string caption;			//Caption for graphic outputs
  179 : 	real GradNorm;			//Gradient Norm
  180 : 	real GradProduct;		//Scalar product between the current gradient and the previous one
  181 : 	bool rollback=false;		//Did we roll back ?
  182 : 	real actualstep;		//Actual step size
  183 : 	real lagrange;			//Lagrange Multiplier associated to the Volume constraint
  184 : 	real[int] isoval(20);		//isovalue used for graphic outputs
  185 : 
  186 : 	int constrained=1;
  187 : 	if (volume0<0) {constrained=0;};
  188 : 
  189 : /////////////////////////
  190 : // Elasticity Problem  //
  191 : /////////////////////////
  192 : 	problem elasticity([u1,u2],[v1,v2]) =
  193 : 		int2d(Sh)(
  194 :         		2.*mu*(dx(u1)*dx(v1)+dy(u2)*dy(v2)+((dx(u2)+dy(u1))*(dx(v2)+dy(v1)))/2.)
  195 :               		+lambda*(dx(u1)+dy(u2))*(dx(v1)+dy(v2)))
  196 : 		-int1d(Sh,neumann)(g1*v1+g2*v2)	           
  197 :     	+on(FREE,u1=0,u2=0);
  198 : 
  199 : ////////////////////////////////////////
  200 : // Expression of the shape's Gradient //
  201 : ////////////////////////////////////////
  202 : 	macro gradientexp()
  203 # 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 # //
  205 : 
  206 : ///////////////////////
  207 : // Extension Problem //
  208 : ///////////////////////
  209 : //  H1 scalar product between vector-valued functions
  210 : 	macro prodscal(t1,t2,p1,p2)
  211 # 		dx(t1)*dx(p1)+dy(t1)*dy(p1)+dx(t2)*dx(p2)+dy(t2)*dy(p2)+t1*p1+t2*p2
  212 #  )  //
  213 : 	problem extension([d1,d2],[theta1,theta2]) =
  214 : 		int2d(Sh)(prodscal(d1,d2,theta1,theta2)
  211 @ 		
  212 @ 
  211 @ 		dx(d1)*dx(theta1)+dy(d1)*dy(theta1)+dx(d2)*dx(theta2)+dy(d2)*dy(theta2)+d1*theta1+d2*theta2
  212 @ )
  215 : 		+int1d(Sh,free) ((theta1*N.x+theta2*N.y)*(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @  + lagrange*constrained)*cut)
  216 : 	  +on(WALL,d1=0,d2=0);
  217 : 
  218 : //////////////////////////////
  219 : //      Initialization      //
  220 : //////////////////////////////
  221 : int iter,iter0;
  222 : string  backupnameNb;
  223 : if(!tocontinue){
  224 : 	iter0=1;
  225 : 	if (volume0==0) {volume0=int1d(Sh)(x*N.x+y*N.y)/2;}	// Computation of the initial Volume
  226 : 	elasticity;						// Solving the State Equation
  227 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);		// Initial Compliance
  228 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );				// Computation of the shape derivative
  229 : 
  230 : 	//Evaluation of the Lagrande Multiplier associated to the Volume constraint
  231 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  232 : 	gradient=(gradient-lagrange*constrained)*cut;
  233 : 
  234 : 	//Mesh Adaptation
  235 : 		Th=Sh;
  236 : 		[U1,U2]=[u1,u2];   //interpolation of u on the coarse mesh Th
  237 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[];
  238 : 		Sh=adaptmesh (Th,Uprev1,Uprev2,err=errelas);
  239 : 		actualstep=initialstep;			//Initialization of the initial step
  240 : 
  241 : 	//We save the intial shape
  242 : 	if (nsave!=0) {
  243 : 		//isovalue for graphic output
  244 : 			real gmax=gradient[].max;
  245 : 			real gmin=gradient[].min;
  246 : 			for (int j=0;j<isoval.n;j++) isoval[j]=gmin+(gmax-gmin)/isoval.n*j;
  247 : 		caption="Initial shape, Compliance "+compliance+", Volume "+volume0;
  248 : 		backupnameNb=backupname+nsaved;
  249 : 		plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps= "output/"+backupnameNb+".eps");};}
  250 : else {
  251 : // We recover the datas of a previous computation
  252 : 	// Updating of the meshs if we continue a previous computation
  253 : 		Sh=readmesh(backupname+".msh");
  254 : 		Th=readmesh(backupname+"-geo.msh");
  255 : 		Shprev=readmesh(backupname+"-prev.msh");
  256 : 		Thprev=readmesh(backupname+"-geo-prev.msh");
  257 : 	ifstream f(backupname+".txt");
  258 : 	if (volume0==0) {f >>volume0;} else {real next; f >>next;};
  259 : 	f >>lagrange;		//Lagrange Multiplier
  260 : 	f >>actualstep;		//Actual step size
  261 : 	f >>rollback;		//Did we roll back ?
  262 : 	f >>iter0;		//iteration de départ
  263 : 	f >>nsave0;		//Number of previous back-up copies
  264 : 	f >>isoval;
  265 : 	f >>Dprev1[];f>>Dprev2[];//Previous extenstion fields
  266 : 	nsaved=nsave0; 
  267 : 	nsave0=nsave0+1;};
  268 : 
  269 : /////////////////////////////////////
  270 : // Initialization of the Algorithm //
  271 : /////////////////////////////////////
  272 : 	elasticity;					//Solving the state equation
  273 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);	//Initial compliance
  274 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );			//Computation of the shape derivative
  275 : 	//Evaluation of the Lagrange Multiplier associated to the Volume constraint
  276 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  277 : 	gradient=(gradient-lagrange*constrained)*cut;
  278 : 
  279 : ///////////////////////////////
  280 : //     Optimization Loop     //
  281 : ///////////////////////////////
  282 : for (iter=iter0;iter< niter+iter0;iter=iter+1){
  283 : 	cout <<"Iteration " <<iter <<" ----------------------------------------" <<endl;
  284 : 
  285 : 	////////////////////////////
  286 : 	// Gradient's Computation //
  287 : 	////////////////////////////
  288 : 	elasticity;
  289 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  290 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ )*cut;
  291 : 	cout<<"Compliance :"<<compliance<<"-------------------------------------"<<endl;
  292 : 
  293 : 	[U1,U2]=[u1,u2];  //interpolation of u on the coarse mesh
  294 : 
  295 : 	//Update of the lagrange multiplier
  296 : 		volume=int1d(Sh)(x*N.x+y*N.y)/2;
  297 : 		perimeter=int1d(Sh,free)(cut);
  298 : 		lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter
  299 : 		+lagrangestep*(volume-volume0)/volume0;
  300 : 	gradient=gradient-lagrange*constrained*cut;
  301 : 	
  302 : 	/////////////////////
  303 : 	// Graphic Outputs //
  304 : 	/////////////////////
  305 : 	//isovalues
  306 : 		real gmax=gradient[].max;
  307 : 		for (int j=0;j<isoval.n;j++) 
  308 : 		isoval[j]=isoval[j]*(0.7*isoval[isoval.n-1]+0.3*gmax)/isoval[isoval.n-1];
  309 : 	caption="Iteration "+iter+", Compliance="+compliance+", Volume="+volume;
  310 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  311 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval);
  312 : 	
  313 : 	/////////////////////////
  314 : 	// Back-up Iterations  //
  315 : 	/////////////////////////
  316 : 	if ((nsaved-nsave0)*niter<(iter-iter0-1)*nsave) {
  317 : 	nsaved=nsaved+1;
  318 : 	caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  319 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  320 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps=backupnameNb);
  321 : 	savemesh(Sh,backupname+".msh");};
  322 : 
  323 : 	///////////////////////////////
  324 : 	// Modification of the shape //
  325 : 	///////////////////////////////
  326 : 	extension;		//Computation of the field [d1,d2]
  327 : 	[D1,D2]=[d1,d2];	//Interpolation on the coarse mesh
  328 : 
  329 : 	////////////////////////////////////
  330 : 	// Updating the step              //
  331 : 	////////////////////////////////////
  332 : 	GradNorm=int2d(Th)(prodscal(D1,D2,D1,D2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(D1)+dy(D1)*dy(D1)+dx(D2)*dx(D2)+dy(D2)*dy(D2)+D1*D1+D2*D2
  212 @ );
  333 : 	GradProduct=int2d(Th)(prodscal(D1,D2,Dprev1,Dprev2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(Dprev1)+dy(D1)*dy(Dprev1)+dx(D2)*dx(Dprev2)+dy(D2)*dy(Dprev2)+D1*Dprev1+D2*Dprev2
  212 @ );
  334 : 	if ((GradProduct<0.)&(!rollback)) {
  335 : 		actualstep=actualstep*GradNorm/(GradNorm-GradProduct)/4.; 
  336 :                 cout<<"Step too big: we step back !!!"<<endl; Th=Thprev; Sh=Shprev; rollback=true;}
  337 : 	else 
  338 : 		rollback=false;
  339 : 	if ((GradProduct>0.)&(GradProduct<(GradNorm/2.))){
  340 : 		actualstep=actualstep*2.*GradNorm/(2.*GradNorm-GradProduct); 
  341 :                 cout<<"We increase the step size"<<endl;};
  342 : 	if (GradProduct>(GradNorm/2.)){
  343 : 		actualstep=actualstep*4./3.;
  344 : 		cout<<"We increase the step size"<<endl;};
  345 : 	if(maxstep>0.) 
  346 : 		actualstep=min(actualstep,maxstep);
  347 : 	Thprev=Th;	//We keep a copy of the meshs (in case of backup at the next loop's step)
  348 : 	Shprev=Sh;
  349 : 
  350 : 	//////////////////////////////////
  351 : 	// We move the coarse mesh Th   //
  352 : 	//////////////////////////////////
  353 : 	if (!rollback){
  354 : 		real aa,minaire=checkmovemesh (Th,[x,y])/10000.;
  355 : 		while (minaire > (aa=checkmovemesh(Th,[x+actualstep*D1,y+actualstep*D2])) ){
  356 :   			cout << " problem reversed triangle  => actualstep= actual
  ... : step/2. "<<endl; 
  357 : 			actualstep= actualstep/2.;
  358 : 					}
  359 : 		Th = movemesh (Th,[x+actualstep*D1,y+actualstep*D2]);
  360 : 		cout<<"Mesh moved"<<endl;
  361 : 		cout<<"Actual Step "<<actualstep<<"------------------------------------"<<endl;
  362 : 		[Dprev1,Dprev2]=[0,0];
  363 : 		Dprev1[]=D1[];Dprev2[]=D2[];
  364 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[]; //Interpolation of u on the new mesh Th
  365 : 		};
  366 : 
  367 : 	//////////////////////
  368 : 	// Mesh Adaptation  //
  369 : 	//////////////////////
  370 : 	if (rollback){Sh=Shprev; } 		//We step back
  371 : 	else {
  372 : 		cout<<"Mesh adaptation of Sh"<<endl;
  373 : 		Sh=adaptmesh(Th,Uprev1,Uprev2,[Dprev1,Dprev2],err=errelas);
  374 : 		plot(Sh,wait=0);
  375 : 		cout<<"Mesh adaptation of the coarse mesh Th"<<endl;
  376 : 		Th=adaptmesh(Sh,metricmsh,0,metricmsh,IsMetric=1,ratio=0,omega=200,splitpbedge=1,hmin=0.05,abserror=1); }
  377 : 	cout<<"Mesh adaptation done"<<endl;
  378 : };
  379 : ///// END OF THE OPTIMIZATION LOOP /////
  380 : 
  381 : // Back-up    ///////////////////////////////////////////////
  382 : if (nsave!=0) {
  383 : 	//We save the meshes
  384 : 		savemesh(Sh,backupname+".msh");
  385 : 		savemesh(Shprev,backupname+"-prev.msh");
  386 : 		savemesh(Th,backupname+"-geo.msh");
  387 : 		savemesh(Th,backupname+"-geo-prev.msh");
  388 : 	//We save all variables
  389 : 		{ofstream f(backupname+".txt");
  390 : 		f << volume0<<"\n";	//Initial Volume
  391 : 		f <<lagrange<<"\n";	//Lagrange Multiplier
  392 : 		f <<actualstep<<"\n";	//Actual step
  393 : 		f <<rollback<<"\n";	//boolean variable
  394 : 		f <<iter<<"\n";		//Current Iteration
  395 : 		f <<nsaved+1<<"\n";	//Number of back-up done
  396 : 		f <<isoval<<"\n";
  397 : 		[Dprev1,Dprev2]=[Dprev1,Dprev2];
  398 : 		f <<Dprev1[]<<endl;f<<Dprev2[]<<endl;};
  399 : 	nsaved=nsaved+1;
  400 : 	elasticity;
  401 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );
  402 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  403 : 	cout<<"Compliance : "<<compliance<<"-------------------------------------"<<endl;
  404 : 	gradient=gradient*cut;
  405 : 	volume=int2d(Sh)(1.);
  406 : 	perimeter=int1d(Sh,free)(cut);
  407 : 	lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter+lagrangestep*(volume-volume0)/volume0;
  408 : 	gradient=gradient-lagrange*constrained*cut;
  409 : 	//Graphic output of the gradient
  410 : 		caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  411 : 		backupnameNb=backupname+nsaved+".eps";
  412 : 		plot(gradient,fill=1,value=0,cmm=caption,viso=isoval,ps="output/"+ backupnameNb);
  413 : };
  414 :  sizestack + 1024 =11464  ( 10440 )

  --  mesh:  Nb of Triangles =  37968, Nb of Vertices 19584
  -- Solve : 
          min -0.0528149  max 0.225377
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 4062 , h  min 0.00136406 , h max 0.251566
     area =  1.58017 , M area = 1753.09 , M area/( |Khat| nt) 0.996697
     infiny-regularity:  min 0.121112  max 2.41083
     anisomax  8.36997, beta max = 3.28191 min  0.732891
  --  mesh:  Nb of Triangles =   4062, Nb of Vertices 2221
  -- Solve : 
          min -0.0536388  max 0.22726
Iteration 1 ----------------------------------------
  -- Solve : 
          min -0.0536388  max 0.22726
Compliance :1.69822-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -4.57222  max 4.56924
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00625------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 4088 , h  min 0.00079627 , h max 0.197028
     area =  1.56722 , M area = 1809.99 , M area/( |Khat| nt) 1.0225
     infiny-regularity:  min 0.212413  max 2.5518
     anisomax  9.20923, beta max = 2.16009 min  0.700764
  --  mesh:  Nb of Triangles =   4088, Nb of Vertices 2234
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 550 , h  min 0.00480588 , h max 0.444183
     area =  1.57073 , M area = 15.707 , M area/( |Khat| nt) 0.0659521
     infiny-regularity:  min 0.00726553  max 8.19866
     anisomax  26.3522, beta max = 53.0744 min  0.88047
  --  mesh:  Nb of Triangles =    550, Nb of Vertices 355
Mesh adaptation done
Iteration 2 ----------------------------------------
  -- Solve : 
          min -0.0499089  max 0.24719
Compliance :1.90717-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.86121  max 1.87621
We increase the step size
Mesh moved
Actual Step 0.00739539------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2870 , h  min 0.00128996 , h max 0.161742
     area =  1.52407 , M area = 1255.02 , M area/( |Khat| nt) 1.00988
     infiny-regularity:  min 0.317863  max 4.53707
     anisomax  5.40182, beta max = 1.54492 min  0.722079
  --  mesh:  Nb of Triangles =   2870, Nb of Vertices 1578
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 547 , h  min 0.00609215 , h max 0.467837
     area =  1.5285 , M area = 8.7963 , M area/( |Khat| nt) 0.0371374
     infiny-regularity:  min 0.00500034  max 12.3305
     anisomax  19.0262, beta max = 50.3567 min  1.09031
  --  mesh:  Nb of Triangles =    547, Nb of Vertices 353
Mesh adaptation done
Iteration 3 ----------------------------------------
  -- Solve : 
          min -0.0485593  max 0.248707
Compliance :1.90101-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.86163  max 0.995978
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00493026------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2721 , h  min 0.000723255 , h max 0.151243
     area =  1.50995 , M area = 1211.45 , M area/( |Khat| nt) 1.0282
     infiny-regularity:  min 0.3162  max 3.45635
     anisomax  6.04156, beta max = 1.52663 min  0.716312
  --  mesh:  Nb of Triangles =   2721, Nb of Vertices 1508
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 544 , h  min 0.00238367 , h max 0.462973
     area =  1.51533 , M area = 8.7306 , M area/( |Khat| nt) 0.0370634
     infiny-regularity:  min 0.00238817  max 10.5034
     anisomax  41.4853, beta max = 50.0076 min  0.93314
  --  mesh:  Nb of Triangles =    544, Nb of Vertices 351
Mesh adaptation done
Iteration 4 ----------------------------------------
  -- Solve : 
          min -0.04793  max 0.251412
Compliance :1.92331-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.33468  max 1.19554
We increase the step size
Mesh moved
Actual Step 0.00657368------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2526 , h  min 0.00165712 , h max 0.263549
     area =  1.51624 , M area = 1095.72 , M area/( |Khat| nt) 1.00176
     infiny-regularity:  min 0.177896  max 6.4763
     anisomax  6.39393, beta max = 2.37974 min  0.655738
  --  mesh:  Nb of Triangles =   2526, Nb of Vertices 1402
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 538 , h  min 0.0124378 , h max 0.494643
     area =  1.52422 , M area = 7.9437 , M area/( |Khat| nt) 0.0340989
     infiny-regularity:  min 0.00506847  max 4.29019
     anisomax  16.252, beta max = 52.9061 min  1.44347
  --  mesh:  Nb of Triangles =    538, Nb of Vertices 347
Mesh adaptation done
Iteration 5 ----------------------------------------
  -- Solve : 
          min -0.0476236  max 0.252516
Compliance :1.93852-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.20511  max 1.21
We increase the step size
Mesh moved
Actual Step 0.00876491------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2876 , h  min 0.00143148 , h max 0.149566
     area =  1.53096 , M area = 1267.56 , M area/( |Khat| nt) 1.01784
     infiny-regularity:  min 0.294854  max 6.63738
     anisomax  4.96271, beta max = 1.58068 min  0.668261
  --  mesh:  Nb of Triangles =   2876, Nb of Vertices 1584
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 535 , h  min 0.0129782 , h max 0.484151
     area =  1.5406 , M area = 7.71985 , M area/( |Khat| nt) 0.0333238
     infiny-regularity:  min 0.00375339  max 1.12109
     anisomax  24.4893, beta max = 65.7281 min  1.42775
  --  mesh:  Nb of Triangles =    535, Nb of Vertices 345
Mesh adaptation done
Iteration 6 ----------------------------------------
  -- Solve : 
          min -0.0468722  max 0.254956
Compliance :1.96055-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.13467  max 1.18653
We increase the step size
Mesh moved
Actual Step 0.0116865------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3029 , h  min 0.0015847 , h max 0.152293
     area =  1.5672 , M area = 1337.24 , M area/( |Khat| nt) 1.01955
     infiny-regularity:  min 0.30891  max 4.23446
     anisomax  5.94066, beta max = 1.46028 min  0.66722
  --  mesh:  Nb of Triangles =   3029, Nb of Vertices 1664
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 532 , h  min 0.0130079 , h max 0.486479
     area =  1.57553 , M area = 8.80765 , M area/( |Khat| nt) 0.0382338
     infiny-regularity:  min 0.00517396  max 2.57022
     anisomax  21.5576, beta max = 50.9911 min  1.4099
  --  mesh:  Nb of Triangles =    532, Nb of Vertices 343
Mesh adaptation done
Iteration 7 ----------------------------------------
  -- Solve : 
          min -0.0452938  max 0.258258
Compliance :1.98468-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.06884  max 1.36736
We increase the step size
Mesh moved
Actual Step 0.0155821------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2983 , h  min 0.001449 , h max 0.14321
     area =  1.62455 , M area = 1319.83 , M area/( |Khat| nt) 1.02179
     infiny-regularity:  min 0.276677  max 4.08753
     anisomax  6.71447, beta max = 1.47107 min  0.600417
  --  mesh:  Nb of Triangles =   2983, Nb of Vertices 1641
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 526 , h  min 0.0134991 , h max 0.49655
     area =  1.63199 , M area = 8.37264 , M area/( |Khat| nt) 0.03676
     infiny-regularity:  min 0.00524043  max 3.05798
     anisomax  20.6686, beta max = 48.9773 min  1.37571
  --  mesh:  Nb of Triangles =    526, Nb of Vertices 339
Mesh adaptation done
Iteration 8 ----------------------------------------
  -- Solve : 
          min -0.0442149  max 0.260434
Compliance :1.99881-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.40763  max 2.1313
We increase the step size
Mesh moved
Actual Step 0.0207761------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2834 , h  min 0.00366353 , h max 0.153893
     area =  1.74472 , M area = 1264.68 , M area/( |Khat| nt) 1.03058
     infiny-regularity:  min 0.296081  max 3.34728
     anisomax  5.9717, beta max = 1.50407 min  0.701201
  --  mesh:  Nb of Triangles =   2834, Nb of Vertices 1559
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 535 , h  min 0.0145773 , h max 0.475994
     area =  1.74841 , M area = 9.38523 , M area/( |Khat| nt) 0.0405126
     infiny-regularity:  min 0.00462729  max 4.80113
     anisomax  20.8584, beta max = 56.0245 min  1.12852
  --  mesh:  Nb of Triangles =    535, Nb of Vertices 345
Mesh adaptation done
Iteration 9 ----------------------------------------
  -- Solve : 
          min -0.0442747  max 0.262681
Compliance :1.99883-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.3708  max 1.94675
We increase the step size
Mesh moved
Actual Step 0.0277015------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3447 , h  min 0.00246242 , h max 0.182043
     area =  1.90246 , M area = 1527.09 , M area/( |Khat| nt) 1.02311
     infiny-regularity:  min 0.094817  max 2.90027
     anisomax  15.3449, beta max = 2.94567 min  0.693966
  --  mesh:  Nb of Triangles =   3447, Nb of Vertices 1881
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 526 , h  min 0.014534 , h max 0.510718
     area =  1.90372 , M area = 14.0187 , M area/( |Khat| nt) 0.061549
     infiny-regularity:  min 0.0054212  max 25.8963
     anisomax  17.1717, beta max = 49.7472 min  0.524711
  --  mesh:  Nb of Triangles =    526, Nb of Vertices 339
Mesh adaptation done
Iteration 10 ----------------------------------------
  -- Solve : 
          min -0.0414415  max 0.266847
Compliance :2.04743-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.08809  max 1.39698
We increase the step size
Mesh moved
Actual Step 0.0369353------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3616 , h  min 0.00313501 , h max 0.174601
     area =  2.07015 , M area = 1605.7 , M area/( |Khat| nt) 1.0255
     infiny-regularity:  min 0.233264  max 3.13049
     anisomax  6.11679, beta max = 1.46945 min  0.689913
  --  mesh:  Nb of Triangles =   3616, Nb of Vertices 1964
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 517 , h  min 0.0104034 , h max 0.546819
     area =  2.06932 , M area = 13.7047 , M area/( |Khat| nt) 0.0612177
     infiny-regularity:  min 0.00556923  max 10.1485
     anisomax  18.8514, beta max = 49.4283 min  1.2698
  --  mesh:  Nb of Triangles =    517, Nb of Vertices 333
Mesh adaptation done
Iteration 11 ----------------------------------------
  -- Solve : 
          min -0.0409832  max 0.269829
Compliance :2.07144-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.02401  max 1.28087
We increase the step size
Mesh moved
Actual Step 0.049247------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3771 , h  min 0.00466334 , h max 0.1851
     area =  2.29208 , M area = 1674.29 , M area/( |Khat| nt) 1.02535
     infiny-regularity:  min 0.350916  max 2.47144
     anisomax  5.96178, beta max = 1.59914 min  0.693091
  --  mesh:  Nb of Triangles =   3771, Nb of Vertices 2044
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 483 , h  min 0.0125543 , h max 0.593302
     area =  2.2883 , M area = 15.11 , M area/( |Khat| nt) 0.0722464
     infiny-regularity:  min 0.00560868  max 4.41805
     anisomax  22.7408, beta max = 51.3968 min  1.13525
  --  mesh:  Nb of Triangles =    483, Nb of Vertices 312
Mesh adaptation done
Iteration 12 ----------------------------------------
  -- Solve : 
          min -0.0399099  max 0.271194
Compliance :2.07933-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.44098  max 1.69876
We increase the step size
Mesh moved
Actual Step 0.0656627------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3585 , h  min 0.0066668 , h max 0.209071
     area =  2.72342 , M area = 1585.1 , M area/( |Khat| nt) 1.0211
     infiny-regularity:  min 0.250204  max 4.36959
     anisomax  6.38237, beta max = 1.56013 min  0.752033
  --  mesh:  Nb of Triangles =   3585, Nb of Vertices 1946
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 478 , h  min 0.00878292 , h max 0.543763
     area =  2.72815 , M area = 18.186 , M area/( |Khat| nt) 0.0878637
     infiny-regularity:  min 0.00284912  max 5.59126
     anisomax  25.0845, beta max = 73.9237 min  0.950308
  --  mesh:  Nb of Triangles =    478, Nb of Vertices 307
Mesh adaptation done
Iteration 13 ----------------------------------------
  -- Solve : 
          min -0.0382893  max 0.271864
Compliance :2.0744-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.86452  max 2.08499
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0437751------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3532 , h  min 0.00779164 , h max 0.199821
     area =  3.14548 , M area = 1548.17 , M area/( |Khat| nt) 1.01227
     infiny-regularity:  min 0.336575  max 2.47005
     anisomax  5.48821, beta max = 1.48203 min  0.735699
  --  mesh:  Nb of Triangles =   3532, Nb of Vertices 1914
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 444 , h  min 0.00572758 , h max 0.605771
     area =  3.1509 , M area = 19.2275 , M area/( |Khat| nt) 0.100009
     infiny-regularity:  min 0.00382199  max 2.59266
     anisomax  35.3668, beta max = 56.2432 min  1.11406
  --  mesh:  Nb of Triangles =    444, Nb of Vertices 285
Mesh adaptation done
Iteration 14 ----------------------------------------
  -- Solve : 
          min -0.0382676  max 0.27304
Compliance :2.07653-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.81052  max 1.9248
We increase the step size
Mesh moved
Actual Step 0.0583668------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3400 , h  min 0.0066646 , h max 0.238449
     area =  3.73959 , M area = 1512.81 , M area/( |Khat| nt) 1.02756
     infiny-regularity:  min 0.204888  max 4.64309
     anisomax  7.39115, beta max = 1.50927 min  0.721891
  --  mesh:  Nb of Triangles =   3400, Nb of Vertices 1847
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 382 , h  min 0.0033323 , h max 0.563636
     area =  3.74215 , M area = 21.7105 , M area/( |Khat| nt) 0.131252
     infiny-regularity:  min 0.00630008  max 3.88968
     anisomax  92.0997, beta max = 52.8892 min  1.04493
  --  mesh:  Nb of Triangles =    382, Nb of Vertices 249
Mesh adaptation done
Iteration 15 ----------------------------------------
  -- Solve : 
          min -0.0375214  max 0.27279
Compliance :2.06755-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.50351  max 2.57128
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0194556------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
 We lost 1  other edges 126
 Fatal error in the mesh generator 1100
  current line = 373
Meshing error: Bamg
 number : 1100, 
Meshing error: Bamg
 number : 1100, 
 err code 5 ,  mpirank 0
