-- FreeFem++ v4.700001 (Sat Oct 17 12:48:33 CEST 2020 - git v4.7-64-g08041365)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : ////////////////////////////////////////////////
    2 : // Compliance Optimization                    //
    3 : // by the boundary variation method           //
    4 : // Copyright O.Pantz, G. Allaire (2005)       //
    5 : ////////////////////////////////////////////////
    6 : 
    7 : // Optimization Parameters 
    8 : int niter=60;			//Number of iterations
    9 : real errelas=0.01;		//Error for the resolution of the variational problems
   10 : real metricmsh=5.;		//Metric used for the coarse mesh: Bigger=finer mesh
   11 : real initialstep=0.2;		//Initial step
   12 : real maxstep=-1.;		//Maximum step (<0 => no limit)
   13 : real lagrangestep=3.;		//Updating step of the Lagrange multiplier associated to the Volume's constraint
   14 : bool tocontinue=false;		//false=start a new computation, true=continue a previous computation
   15 : string backupname="output";	//Name under which the results are stored
   16 : int nsave=1;			//Number of iterations to be saved
   17 : real volume0=95.;		//=0 Constant Volume during the iterations, >0 Target Volume, <0 No Volume's constraint
   18 : 
   19 : int np =10;
   20 : // construction of the initial mesh
   21 : 	mesh Sh,Th,Shprev,Thprev;
   22 : 	//Definition of the boundary labels
   23 : 	int neumann=1; int dirichlet=2;
   24 : 	int free=3;
   25 : 
   26 : 
   27 : 	int WALL = 1;
   28 : 	int LOAD = 2;
   29 : 	int FREE = 3;
   30 : //this is case 1
   31 : 	
   32 :  // border L11(t = 0.0, 0.5){x = t; y = 0.0; label = FREE;}
   33 :  //    border L21(t = 0.0, 0.45){x = 0.5; y = t; label = FREE;}
   34 :  //    border L22(t = 0.45, 0.55){x = 0.5; y = t; label = LOAD;}
   35 :  //    border L23(t = 0.55, 1.0){x = 0.5; y = t; label = FREE;}
   36 :  //    border L31(t = 0.5, 0){x = t; y = 1.0; label = FREE;}
   37 :  //    border L41(t = 1.0, 0.9){x = 0.0; y = t; label = WALL;}
   38 :  //    border L42(t = 0.9, 0.1){x = 0.0; y = t; label = FREE;}
   39 :  //    border L43(t = 0.1, 0.0){x = 0.0; y = t; label = WALL;}
   40 : 
   41 :  //    Sh = buildmesh(L11(5 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(5 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np));
   42 : 
   43 : 
   44 : //this is case 2
   45 : 
   46 : 	// real r = 0.15;                                                                    
   47 : 
   48 :  //    border L11(t = -1.0, 1.0){x = t; y = 0.0; label = FREE;}
   49 :  //    border L21(t = 0.0, 0.45){x = 1.0; y = t; label = FREE;}
   50 :  //    border L22(t = 0.45, 0.55){x = 1.0; y = t; label = LOAD;}
   51 :  //    border L23(t = 0.55, 1.0){x = 1.0; y = t; label = FREE;}
   52 :  //    border L31(t = 1.0, -1.0){x = t; y = 1.0; label = FREE;}
   53 :  //    border L41(t = 1.0, 0.9){x = -1.0; y = t; label = WALL;}
   54 :  //    border L42(t = 0.9, 0.1){x = -1.0; y = t; label = FREE;}
   55 :  //    border L43(t = 0.1, 0.0){x = -1.0; y = t; label = WALL;}
   56 : 
   57 :     
   58 :  //    border C11(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   59 :  //    border C12(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   60 :  //    border C21(t = 0, 2 * pi){x = -0.2 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   61 :  //    border C22(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   62 :  //    border C31(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   63 :  //    border C32(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   64 : 
   65 :  //    Sh = buildmesh(L11(20 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(20 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np)
   66 :  //                    + C11(-10 * np) + C12(-10 * np)  + C21(-10 * np) + C22(-10 * np) + C31(-10 * np) + C32(-10 * np));
   67 : 
   68 : 
   69 : //this is case 3
   70 : 
   71 : 	 real r = 0.2;                                                 
   72 : 
   73 :     border L11(t = 0.0, 1.0){x = t; y = 0.0; label = FREE;}
   74 :     border L21(t = 0.0, 0.2){x = 1.0; y = t; label = LOAD;}
   75 :     border L22(t = 0.2, 0.8){x = 1.0; y = t; label = FREE;}
   76 :     border L23(t = 0.8, 1.0){x = 1.0; y = t; label = LOAD;}
   77 :     border L31(t = 1.0, 0.0){x = t; y = 1.0; label = FREE;}
   78 :     border L41(t = 1.0, 0.95){x = 0.0; y = t; label = WALL;}
   79 :     border L42(t = 0.95, 0.05){x = 0.0; y = t; label = FREE;}
   80 :     border L43(t = 0.05, 0.0){x = 0.0; y = t; label = WALL;}
   81 : 
   82 :     
   83 :     border C11(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.25 + r * sin(t); label = FREE;}
   84 :     border C31(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.75 + r * sin(t); label = FREE;}
   85 : 
   86 :     Sh = buildmesh(L11(10 * np) + L21(2 * np) + L22(6 * np) + L23(2 * np) + L31(10 * np) + L41(1 * np) + L42(9 * np) + L43(1 * np)
   87 :         + C11(-15 * np) + C31(-15 * np)
   88 :         );
   89 : 
   90 : 
   91 : //this is case 4:
   92 : 
   93 : 	 // real r = 0.25;
   94 : 
   95 :   //   border L11(t = -1.0, -0.9){x = t; y = 0; label = FREE;}
   96 :   //   border L12(t = -0.9, -0.2){x = t; y = 0; label = FREE;}
   97 :   //   border L13(t = -0.2, 0.2){x = t; y = 0; label = FREE;}
   98 :   //   border L14(t = 0.2, 0.9){x = t; y = 0; label = FREE;}
   99 :   //   border L15(t = 0.9, 1.0){x = t; y = 0; label = FREE;}
  100 :     
  101 :   //   border L21(t = 0, 1.2){x = 1.0; y = t; label = FREE;}
  102 :   //   border L22(t = 1.0, -1.0){x = t; y = 1.2; label = FREE;}
  103 :   //   border L23(t = 1.2, 0){x = -1.0; y = t; label = FREE;}
  104 :     
  105 :   //   border C10(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  106 :   //   border C11(t = 0, 2 * pi){x = r * cos(t); y = 0.8 + r * sin(t); label = FREE;}
  107 :   //   border C12(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  108 : 
  109 :   //   Sh = buildmesh(L11(1 * np) + L12(7 * np) + L13(4 * np) + L14(7 * np) + L15(1 * np) + L21(12 * np) + L22(20 * np) + L23(12 * np) 
  110 :   //       + C10(-15 * np) + C11(-15 * np) + C12(-15 * np) 
  111 :   //       );
  112 : 
  113 : 
  114 : //this is case 5
  115 : // real r = 0.05;
  116 : 
  117 : //     border L11(t = 0.4, -0.4){x = t; y = 1.2; label = FREE;}
  118 : //     border L21(t = 1.2, 0.8){x = -0.4; y = t; label = FREE;}
  119 : //     border L31(t = -0.4, -0.35){x = t; y = 0.8; label = LOAD;}
  120 : //     border L32(t = -0.35, -0.2){x = t; y = 0.8; label = FREE;}
  121 : //     border L41(t = 0.8, 0.0){x = -0.2; y = t; label = FREE;}
  122 : //     border L51(t = -0.2, -0.15){x = t; y = 0.0; label = WALL;}
  123 : //     border L52(t = -0.15, 0.15){x = t; y = 0.0; label = FREE;}
  124 : //     border L53(t = 0.15, 0.2){x = t; y = 0.0; label = WALL;}
  125 : //     border L42(t = 0.0, 0.8){x = 0.2; y = t; label = FREE;}
  126 : //     border L33(t = 0.2, 0.35){x = t; y = 0.8; label = FREE;}
  127 : //     border L34(t = 0.35, 0.4){x = t; y = 0.8; label = LOAD;}
  128 : //     border L22(t = 0.8, 1.2){x = 0.4; y = t; label = FREE;}
  129 : 
  130 : //     border C1(t = 0, 2 * pi){x = -0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  131 : //     border C2(t = 0, 2 * pi){x = r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  132 : //     border C3(t = 0, 2 * pi){x = 0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  133 : 
  134 : //     Sh = buildmesh(L11(8 * np) + L21(4 * np) + L31(1 * np) + L32(2 * np) + L41(8 * np) + L51(np) + L52(3 * np) + L53(1 * np) 
  135 : //                     + L42(8 * np) + L33(2 * np) + L34(1 * np) + L22(4 * np) + C1(-7 * np) + C2(-7 * np) + C3(-7 * np));
  136 : 
  137 : 
  138 : 
  139 : // 	Th=Sh;
  140 : // 	Thprev=Th;
  141 : 
  142 : 	// cut function used to regularize the gradient shape near singularities
  143 : 	// func cut=1-(x>19.5)*(abs(y)<1.5)-(x<0.5)*(y>1.5)*(y<4.5)-(x<0.5)*(y<-1.5)*(y>-4.5);
  144 : 
  145 : 
  146 : 	func cut=(x > 0.5) ;
  147 : 
  148 : // Material parameters
  149 : 	real E=15.;				//Young Modulus (always positif)
  150 : 	real nu=0.35;				//Poisson ratio (between -1 and 1/2)
  151 : 	real lambda=E*nu/((1.+nu)*(1.-2.*nu));	//Lame Moduli
  152 : 	real mu=E/(2.*(1.+nu));
  153 : 
  154 : //Applied Loads
  155 : 	func g1=0; func g2=50;
  156 : 
  157 : //Definition of the variables and intialization
  158 : 	//Finite elements spaces on the finer mesh Sh
  159 : 		fespace Wh(Sh,P1);  		
  160 : 		fespace WSh(Sh,[P2,P2]);
  161 : 	//Finite elements spaces on the coarse mesh Th
  162 : 		fespace WTh(Th,[P2,P2]);	
  163 : 		
  164 : 	Wh gradient; 			//Gradient
  165 : 	WSh [d1,d2];			//extension field
  166 : 	WSh [theta1,theta2];		//test functions for the extension field
  167 : 	WSh [u1,u2],[v1,v2];		//Displacement and Test functions
  168 : 
  169 : 	//Interpolated Finite elements on the coarse mesh
  170 : 	WTh [D1,D2],[Dprev1,Dprev2]; 
  171 : 	WTh [U1,U2],[Uprev1,Uprev2];
  172 : 
  173 : 	int nsaved=0;			//Initialization counter of the back-up copies
  174 : 	int nsave0=100;			//Current number of back-up copies
  175 : 	real compliance;		//Compliance
  176 : 	real volume;
 *** Warning  The identifier volume hide a Global identifier  
			//Volume of the current shape
  177 : 	real perimeter;			//Perimeter of the optimized boundary
  178 : 	string caption;			//Caption for graphic outputs
  179 : 	real GradNorm;			//Gradient Norm
  180 : 	real GradProduct;		//Scalar product between the current gradient and the previous one
  181 : 	bool rollback=false;		//Did we roll back ?
  182 : 	real actualstep;		//Actual step size
  183 : 	real lagrange;			//Lagrange Multiplier associated to the Volume constraint
  184 : 	real[int] isoval(20);		//isovalue used for graphic outputs
  185 : 
  186 : 	int constrained=1;
  187 : 	if (volume0<0) {constrained=0;};
  188 : 
  189 : /////////////////////////
  190 : // Elasticity Problem  //
  191 : /////////////////////////
  192 : 	problem elasticity([u1,u2],[v1,v2]) =
  193 : 		int2d(Sh)(
  194 :         		2.*mu*(dx(u1)*dx(v1)+dy(u2)*dy(v2)+((dx(u2)+dy(u1))*(dx(v2)+dy(v1)))/2.)
  195 :               		+lambda*(dx(u1)+dy(u2))*(dx(v1)+dy(v2)))
  196 : 		-int1d(Sh,neumann)(g1*v1+g2*v2)	           
  197 :     	+on(FREE,u1=0,u2=0);
  198 : 
  199 : ////////////////////////////////////////
  200 : // Expression of the shape's Gradient //
  201 : ////////////////////////////////////////
  202 : 	macro gradientexp()
  203 # 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 # //
  205 : 
  206 : ///////////////////////
  207 : // Extension Problem //
  208 : ///////////////////////
  209 : //  H1 scalar product between vector-valued functions
  210 : 	macro prodscal(t1,t2,p1,p2)
  211 # 		dx(t1)*dx(p1)+dy(t1)*dy(p1)+dx(t2)*dx(p2)+dy(t2)*dy(p2)+t1*p1+t2*p2
  212 #  )  //
  213 : 	problem extension([d1,d2],[theta1,theta2]) =
  214 : 		int2d(Sh)(prodscal(d1,d2,theta1,theta2)
  211 @ 		
  212 @ 
  211 @ 		dx(d1)*dx(theta1)+dy(d1)*dy(theta1)+dx(d2)*dx(theta2)+dy(d2)*dy(theta2)+d1*theta1+d2*theta2
  212 @ )
  215 : 		+int1d(Sh,free) ((theta1*N.x+theta2*N.y)*(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @  + lagrange*constrained)*cut)
  216 : 	  +on(WALL,d1=0,d2=0);
  217 : 
  218 : //////////////////////////////
  219 : //      Initialization      //
  220 : //////////////////////////////
  221 : int iter,iter0;
  222 : string  backupnameNb;
  223 : if(!tocontinue){
  224 : 	iter0=1;
  225 : 	if (volume0==0) {volume0=int1d(Sh)(x*N.x+y*N.y)/2;}	// Computation of the initial Volume
  226 : 	elasticity;						// Solving the State Equation
  227 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);		// Initial Compliance
  228 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );				// Computation of the shape derivative
  229 : 
  230 : 	//Evaluation of the Lagrande Multiplier associated to the Volume constraint
  231 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  232 : 	gradient=(gradient-lagrange*constrained)*cut;
  233 : 
  234 : 	//Mesh Adaptation
  235 : 		Th=Sh;
  236 : 		[U1,U2]=[u1,u2];   //interpolation of u on the coarse mesh Th
  237 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[];
  238 : 		Sh=adaptmesh (Th,Uprev1,Uprev2,err=errelas);
  239 : 		actualstep=initialstep;			//Initialization of the initial step
  240 : 
  241 : 	//We save the intial shape
  242 : 	if (nsave!=0) {
  243 : 		//isovalue for graphic output
  244 : 			real gmax=gradient[].max;
  245 : 			real gmin=gradient[].min;
  246 : 			for (int j=0;j<isoval.n;j++) isoval[j]=gmin+(gmax-gmin)/isoval.n*j;
  247 : 		caption="Initial shape, Compliance "+compliance+", Volume "+volume0;
  248 : 		backupnameNb=backupname+nsaved;
  249 : 		plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps= "output/"+backupnameNb+".eps");};}
  250 : else {
  251 : // We recover the datas of a previous computation
  252 : 	// Updating of the meshs if we continue a previous computation
  253 : 		Sh=readmesh(backupname+".msh");
  254 : 		Th=readmesh(backupname+"-geo.msh");
  255 : 		Shprev=readmesh(backupname+"-prev.msh");
  256 : 		Thprev=readmesh(backupname+"-geo-prev.msh");
  257 : 	ifstream f(backupname+".txt");
  258 : 	if (volume0==0) {f >>volume0;} else {real next; f >>next;};
  259 : 	f >>lagrange;		//Lagrange Multiplier
  260 : 	f >>actualstep;		//Actual step size
  261 : 	f >>rollback;		//Did we roll back ?
  262 : 	f >>iter0;		//iteration de départ
  263 : 	f >>nsave0;		//Number of previous back-up copies
  264 : 	f >>isoval;
  265 : 	f >>Dprev1[];f>>Dprev2[];//Previous extenstion fields
  266 : 	nsaved=nsave0; 
  267 : 	nsave0=nsave0+1;};
  268 : 
  269 : /////////////////////////////////////
  270 : // Initialization of the Algorithm //
  271 : /////////////////////////////////////
  272 : 	elasticity;					//Solving the state equation
  273 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);	//Initial compliance
  274 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );			//Computation of the shape derivative
  275 : 	//Evaluation of the Lagrange Multiplier associated to the Volume constraint
  276 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  277 : 	gradient=(gradient-lagrange*constrained)*cut;
  278 : 
  279 : ///////////////////////////////
  280 : //     Optimization Loop     //
  281 : ///////////////////////////////
  282 : for (iter=iter0;iter< niter+iter0;iter=iter+1){
  283 : 	cout <<"Iteration " <<iter <<" ----------------------------------------" <<endl;
  284 : 
  285 : 	////////////////////////////
  286 : 	// Gradient's Computation //
  287 : 	////////////////////////////
  288 : 	elasticity;
  289 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  290 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ )*cut;
  291 : 	cout<<"Compliance :"<<compliance<<"-------------------------------------"<<endl;
  292 : 
  293 : 	[U1,U2]=[u1,u2];  //interpolation of u on the coarse mesh
  294 : 
  295 : 	//Update of the lagrange multiplier
  296 : 		volume=int1d(Sh)(x*N.x+y*N.y)/2;
  297 : 		perimeter=int1d(Sh,free)(cut);
  298 : 		lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter
  299 : 		+lagrangestep*(volume-volume0)/volume0;
  300 : 	gradient=gradient-lagrange*constrained*cut;
  301 : 	
  302 : 	/////////////////////
  303 : 	// Graphic Outputs //
  304 : 	/////////////////////
  305 : 	//isovalues
  306 : 		real gmax=gradient[].max;
  307 : 		for (int j=0;j<isoval.n;j++) 
  308 : 		isoval[j]=isoval[j]*(0.7*isoval[isoval.n-1]+0.3*gmax)/isoval[isoval.n-1];
  309 : 	caption="Iteration "+iter+", Compliance="+compliance+", Volume="+volume;
  310 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  311 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval);
  312 : 	
  313 : 	/////////////////////////
  314 : 	// Back-up Iterations  //
  315 : 	/////////////////////////
  316 : 	if ((nsaved-nsave0)*niter<(iter-iter0-1)*nsave) {
  317 : 	nsaved=nsaved+1;
  318 : 	caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  319 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  320 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps=backupnameNb);
  321 : 	savemesh(Sh,backupname+".msh");};
  322 : 
  323 : 	///////////////////////////////
  324 : 	// Modification of the shape //
  325 : 	///////////////////////////////
  326 : 	extension;		//Computation of the field [d1,d2]
  327 : 	[D1,D2]=[d1,d2];	//Interpolation on the coarse mesh
  328 : 
  329 : 	////////////////////////////////////
  330 : 	// Updating the step              //
  331 : 	////////////////////////////////////
  332 : 	GradNorm=int2d(Th)(prodscal(D1,D2,D1,D2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(D1)+dy(D1)*dy(D1)+dx(D2)*dx(D2)+dy(D2)*dy(D2)+D1*D1+D2*D2
  212 @ );
  333 : 	GradProduct=int2d(Th)(prodscal(D1,D2,Dprev1,Dprev2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(Dprev1)+dy(D1)*dy(Dprev1)+dx(D2)*dx(Dprev2)+dy(D2)*dy(Dprev2)+D1*Dprev1+D2*Dprev2
  212 @ );
  334 : 	if ((GradProduct<0.)&(!rollback)) {
  335 : 		actualstep=actualstep*GradNorm/(GradNorm-GradProduct)/4.; 
  336 :                 cout<<"Step too big: we step back !!!"<<endl; Th=Thprev; Sh=Shprev; rollback=true;}
  337 : 	else 
  338 : 		rollback=false;
  339 : 	if ((GradProduct>0.)&(GradProduct<(GradNorm/2.))){
  340 : 		actualstep=actualstep*2.*GradNorm/(2.*GradNorm-GradProduct); 
  341 :                 cout<<"We increase the step size"<<endl;};
  342 : 	if (GradProduct>(GradNorm/2.)){
  343 : 		actualstep=actualstep*4./3.;
  344 : 		cout<<"We increase the step size"<<endl;};
  345 : 	if(maxstep>0.) 
  346 : 		actualstep=min(actualstep,maxstep);
  347 : 	Thprev=Th;	//We keep a copy of the meshs (in case of backup at the next loop's step)
  348 : 	Shprev=Sh;
  349 : 
  350 : 	//////////////////////////////////
  351 : 	// We move the coarse mesh Th   //
  352 : 	//////////////////////////////////
  353 : 	if (!rollback){
  354 : 		real aa,minaire=checkmovemesh (Th,[x,y])/10000.;
  355 : 		while (minaire > (aa=checkmovemesh(Th,[x+actualstep*D1,y+actualstep*D2])) ){
  356 :   			cout << " problem reversed triangle  => actualstep= actual
  ... : step/2. "<<endl; 
  357 : 			actualstep= actualstep/2.;
  358 : 					}
  359 : 		Th = movemesh (Th,[x+actualstep*D1,y+actualstep*D2]);
  360 : 		cout<<"Mesh moved"<<endl;
  361 : 		cout<<"Actual Step "<<actualstep<<"------------------------------------"<<endl;
  362 : 		[Dprev1,Dprev2]=[0,0];
  363 : 		Dprev1[]=D1[];Dprev2[]=D2[];
  364 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[]; //Interpolation of u on the new mesh Th
  365 : 		};
  366 : 
  367 : 	//////////////////////
  368 : 	// Mesh Adaptation  //
  369 : 	//////////////////////
  370 : 	if (rollback){Sh=Shprev; } 		//We step back
  371 : 	else {
  372 : 		cout<<"Mesh adaptation of Sh"<<endl;
  373 : 		Sh=adaptmesh(Th,Uprev1,Uprev2,[Dprev1,Dprev2],err=errelas);
  374 : 		plot(Sh,wait=0);
  375 : 		cout<<"Mesh adaptation of the coarse mesh Th"<<endl;
  376 : 		Th=adaptmesh(Sh,metricmsh,0,metricmsh,IsMetric=1,ratio=0,omega=200,splitpbedge=1,hmin=0.05,abserror=1); }
  377 : 	cout<<"Mesh adaptation done"<<endl;
  378 : };
  379 : ///// END OF THE OPTIMIZATION LOOP /////
  380 : 
  381 : // Back-up    ///////////////////////////////////////////////
  382 : if (nsave!=0) {
  383 : 	//We save the meshes
  384 : 		savemesh(Sh,backupname+".msh");
  385 : 		savemesh(Shprev,backupname+"-prev.msh");
  386 : 		savemesh(Th,backupname+"-geo.msh");
  387 : 		savemesh(Th,backupname+"-geo-prev.msh");
  388 : 	//We save all variables
  389 : 		{ofstream f(backupname+".txt");
  390 : 		f << volume0<<"\n";	//Initial Volume
  391 : 		f <<lagrange<<"\n";	//Lagrange Multiplier
  392 : 		f <<actualstep<<"\n";	//Actual step
  393 : 		f <<rollback<<"\n";	//boolean variable
  394 : 		f <<iter<<"\n";		//Current Iteration
  395 : 		f <<nsaved+1<<"\n";	//Number of back-up done
  396 : 		f <<isoval<<"\n";
  397 : 		[Dprev1,Dprev2]=[Dprev1,Dprev2];
  398 : 		f <<Dprev1[]<<endl;f<<Dprev2[]<<endl;};
  399 : 	nsaved=nsaved+1;
  400 : 	elasticity;
  401 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );
  402 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  403 : 	cout<<"Compliance : "<<compliance<<"-------------------------------------"<<endl;
  404 : 	gradient=gradient*cut;
  405 : 	volume=int2d(Sh)(1.);
  406 : 	perimeter=int1d(Sh,free)(cut);
  407 : 	lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter+lagrangestep*(volume-volume0)/volume0;
  408 : 	gradient=gradient-lagrange*constrained*cut;
  409 : 	//Graphic output of the gradient
  410 : 		caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  411 : 		backupnameNb=backupname+nsaved+".eps";
  412 : 		plot(gradient,fill=1,value=0,cmm=caption,viso=isoval,ps="output/"+ backupnameNb);
  413 : };
  414 :  sizestack + 1024 =11400  ( 10376 )

  --  mesh:  Nb of Triangles =  19560, Nb of Vertices 10134
  -- Solve : 
          min -0.0273134  max 0.110122
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2918 , h  min 0.000891688 , h max 0.2
     area =  0.751588 , M area = 1241.1 , M area/( |Khat| nt) 0.982251
     infiny-regularity:  min 0.0884664  max 2.04242
     anisomax  7.18052, beta max = 3.69044 min  0.759031
  --  mesh:  Nb of Triangles =   2918, Nb of Vertices 1574
  -- Solve : 
          min -0.0281616  max 0.112356
Iteration 1 ----------------------------------------
  -- Solve : 
          min -0.0281616  max 0.112356
Compliance :0.417932-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.20641  max 1.23796
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.1------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3676 , h  min 0.000549055 , h max 0.110081
     area =  0.898976 , M area = 1632.51 , M area/( |Khat| nt) 1.0256
     infiny-regularity:  min 0.372377  max 1.91991
     anisomax  4.3969, beta max = 1.47125 min  0.755723
  --  mesh:  Nb of Triangles =   3676, Nb of Vertices 2005
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 251 , h  min 0.00419117 , h max 0.396964
     area =  0.896792 , M area = 23.1745 , M area/( |Khat| nt) 0.213224
     infiny-regularity:  min 0.00681155  max 7.64826
     anisomax  49.4153, beta max = 35.6635 min  0.641612
  --  mesh:  Nb of Triangles =    251, Nb of Vertices 165
Mesh adaptation done
Iteration 2 ----------------------------------------
  -- Solve : 
          min -0.0269899  max 0.11631
Compliance :0.435069-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.10975  max 2.07243
We increase the step size
Mesh moved
Actual Step 0.133333------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2601 , h  min 0.00603253 , h max 0.188354
     area =  1.34806 , M area = 1165.08 , M area/( |Khat| nt) 1.03446
     infiny-regularity:  min 0.317435  max 2.52186
     anisomax  5.70738, beta max = 1.71055 min  0.708594
  --  mesh:  Nb of Triangles =   2601, Nb of Vertices 1405
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 195 , h  min 0.00374427 , h max 0.546533
     area =  1.3501 , M area = 12.6426 , M area/( |Khat| nt) 0.149727
     infiny-regularity:  min 0.00178971  max 7.27546
     anisomax  19.5956, beta max = 151.485 min  0.933754
  --  mesh:  Nb of Triangles =    195, Nb of Vertices 130
Mesh adaptation done
Iteration 3 ----------------------------------------
  -- Solve : 
          min -0.0282308  max 0.114157
Compliance :0.393395-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.7808  max 4.72714
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0398306------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2294 , h  min 0.00303314 , h max 0.165394
     area =  1.59523 , M area = 1035.34 , M area/( |Khat| nt) 1.04229
     infiny-regularity:  min 0.145522  max 3.7595
     anisomax  6.78679, beta max = 1.93011 min  0.73053
  --  mesh:  Nb of Triangles =   2294, Nb of Vertices 1243
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 181 , h  min 0.00550663 , h max 0.610665
     area =  1.59821 , M area = 8.81104 , M area/( |Khat| nt) 0.112421
     infiny-regularity:  min 0.00361786  max 4.01544
     anisomax  22.3341, beta max = 78.939 min  1.02389
  --  mesh:  Nb of Triangles =    181, Nb of Vertices 120
Mesh adaptation done
Iteration 4 ----------------------------------------
  -- Solve : 
          min -0.0239593  max 0.112945
Compliance :0.370098-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.28499  max 3.27978
We increase the step size
Mesh moved
Actual Step 0.0531075------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2220 , h  min 0.00254482 , h max 0.199142
     area =  2.03058 , M area = 992.079 , M area/( |Khat| nt) 1.03203
     infiny-regularity:  min 0.220736  max 4.79291
     anisomax  9.72725, beta max = 1.67677 min  0.699956
  --  mesh:  Nb of Triangles =   2220, Nb of Vertices 1212
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 163 , h  min 0.00452781 , h max 0.601718
     area =  2.03994 , M area = 14.3077 , M area/( |Khat| nt) 0.202713
     infiny-regularity:  min 0.00277691  max 5.68379
     anisomax  50.4183, beta max = 101.249 min  0.815893
  --  mesh:  Nb of Triangles =    163, Nb of Vertices 108
Mesh adaptation done
Iteration 5 ----------------------------------------
  -- Solve : 
          min -0.0275415  max 0.11919
Compliance :0.415651-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.3971  max 5.14868
We increase the step size
Mesh moved
Actual Step 0.07081------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2200 , h  min 0.00291568 , h max 0.221474
     area =  2.78746 , M area = 989.291 , M area/( |Khat| nt) 1.03849
     infiny-regularity:  min 0.0630939  max 3.84881
     anisomax  8.22179, beta max = 1.96835 min  0.74744
  --  mesh:  Nb of Triangles =   2200, Nb of Vertices 1194
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 155 , h  min 0.00403937 , h max 0.610889
     area =  2.78677 , M area = 13.9634 , M area/( |Khat| nt) 0.208045
     infiny-regularity:  min 0.0037002  max 1.90787
     anisomax  40.1158, beta max = 58.3156 min  0.863305
  --  mesh:  Nb of Triangles =    155, Nb of Vertices 104
Mesh adaptation done
Iteration 6 ----------------------------------------
  -- Solve : 
          min -0.0260154  max 0.112619
Compliance :0.379094-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.96605  max 3.71733
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0223659------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2289 , h  min 0.00230026 , h max 0.308829
     area =  3.10644 , M area = 1023.46 , M area/( |Khat| nt) 1.03258
     infiny-regularity:  min 0.0163644  max 10.8737
     anisomax  59.6376, beta max = 4.43984 min  0.533451
  --  mesh:  Nb of Triangles =   2289, Nb of Vertices 1243
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 154 , h  min 0.0044164 , h max 0.657606
     area =  3.10685 , M area = 15.5342 , M area/( |Khat| nt) 0.232953
     infiny-regularity:  min 0.00380164  max 1.52214
     anisomax  69.2251, beta max = 82.379 min  0.860324
  --  mesh:  Nb of Triangles =    154, Nb of Vertices 103
Mesh adaptation done
Iteration 7 ----------------------------------------
  -- Solve : 
          min -0.0255488  max 0.11802
Compliance :0.392441-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.64689  max 3.63777
We increase the step size
Mesh moved
Actual Step 0.0298212------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2444 , h  min 0.0023144 , h max 0.191168
     area =  3.54354 , M area = 1081.49 , M area/( |Khat| nt) 1.02193
     infiny-regularity:  min 0.140306  max 5.69048
     anisomax  54.3983, beta max = 1.4618 min  0.651902
  --  mesh:  Nb of Triangles =   2444, Nb of Vertices 1324
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 167 , h  min 0.00493467 , h max 0.6429
     area =  3.56119 , M area = 22.9058 , M area/( |Khat| nt) 0.316759
     infiny-regularity:  min 0.00463395  max 11.7882
     anisomax  83.4596, beta max = 81.4214 min  0.480883
  --  mesh:  Nb of Triangles =    167, Nb of Vertices 111
Mesh adaptation done
Iteration 8 ----------------------------------------
  -- Solve : 
          min -0.0272924  max 0.119443
Compliance :0.412045-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.63029  max 4.85419
We increase the step size
Mesh moved
Actual Step 0.0397616------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2519 , h  min 0.00294702 , h max 0.278373
     area =  4.22269 , M area = 1131.55 , M area/( |Khat| nt) 1.0374
     infiny-regularity:  min 0.191109  max 3.58759
     anisomax  14.3636, beta max = 1.93365 min  0.69907
  --  mesh:  Nb of Triangles =   2519, Nb of Vertices 1370
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 171 , h  min 0.00497534 , h max 0.666612
     area =  4.2235 , M area = 25.359 , M area/( |Khat| nt) 0.34248
     infiny-regularity:  min 0.00530462  max 11.3885
     anisomax  30.9438, beta max = 74.4885 min  0.746203
  --  mesh:  Nb of Triangles =    171, Nb of Vertices 114
Mesh adaptation done
Iteration 9 ----------------------------------------
  -- Solve : 
          min -0.0277168  max 0.119589
Compliance :0.414561-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.50153  max 5.68006
We increase the step size
Mesh moved
Actual Step 0.0530155------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2398 , h  min 0.00239817 , h max 0.33434
     area =  5.16586 , M area = 1045.37 , M area/( |Khat| nt) 1.00675
     infiny-regularity:  min 0.0807056  max 3.87164
     anisomax  24.5196, beta max = 3.25358 min  0.73609
  --  mesh:  Nb of Triangles =   2398, Nb of Vertices 1305
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 184 , h  min 0.00464688 , h max 0.749914
     area =  5.17194 , M area = 27.5903 , M area/( |Khat| nt) 0.346288
     infiny-regularity:  min 0.00470267  max 8.00522
     anisomax  33.5465, beta max = 62.7832 min  0.673554
  --  mesh:  Nb of Triangles =    184, Nb of Vertices 121
Mesh adaptation done
Iteration 10 ----------------------------------------
  -- Solve : 
          min -0.0269169  max 0.120573
Compliance :0.412858-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.32251  max 4.86917
We increase the step size
Mesh moved
Actual Step 0.0706873------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2412 , h  min 0.00117217 , h max 0.333655
     area =  6.97716 , M area = 1084.73 , M area/( |Khat| nt) 1.03859
     infiny-regularity:  min 0.0780731  max 2.79891
     anisomax  32.6868, beta max = 2.61765 min  0.717745
  --  mesh:  Nb of Triangles =   2412, Nb of Vertices 1318
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 199 , h  min 0.00474682 , h max 0.828288
     area =  6.96708 , M area = 39.2747 , M area/( |Khat| nt) 0.455784
     infiny-regularity:  min 0.00175281  max 7.71118
     anisomax  46.661, beta max = 124.361 min  0.658472
  --  mesh:  Nb of Triangles =    199, Nb of Vertices 130
Mesh adaptation done
Iteration 11 ----------------------------------------
  -- Solve : 
          min -0.0273525  max 0.123726
Compliance :0.425136-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.53701  max 6.05059
We increase the step size
Mesh moved
Actual Step 0.0942497------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2689 , h  min 0.00276666 , h max 0.371877
     area =  9.346 , M area = 1172.84 , M area/( |Khat| nt) 1.00727
     infiny-regularity:  min 0.0681812  max 3.01216
     anisomax  46.0857, beta max = 5.51382 min  0.734057
  --  mesh:  Nb of Triangles =   2689, Nb of Vertices 1463
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 227 , h  min 0.00498473 , h max 0.698723
     area =  9.35048 , M area = 49.1303 , M area/( |Khat| nt) 0.49983
     infiny-regularity:  min 0.00525415  max 8.39336
     anisomax  66.0131, beta max = 74.0955 min  0.796347
  --  mesh:  Nb of Triangles =    227, Nb of Vertices 146
Mesh adaptation done
Iteration 12 ----------------------------------------
  -- Solve : 
          min -0.0258027  max 0.12085
Compliance :0.406646-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -4.30512  max 6.04211
We increase the step size
Mesh moved
Actual Step 0.125666------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2471 , h  min 0.0018154 , h max 0.574226
     area =  13.3635 , M area = 1079.28 , M area/( |Khat| nt) 1.0087
     infiny-regularity:  min 0.0905032  max 3.3427
     anisomax  29.5277, beta max = 3.59338 min  0.751368
  --  mesh:  Nb of Triangles =   2471, Nb of Vertices 1348
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 269 , h  min 0.00469803 , h max 0.703589
     area =  13.3786 , M area = 68.0705 , M area/( |Khat| nt) 0.584394
     infiny-regularity:  min 0.00403007  max 5.9728
     anisomax  62.627, beta max = 63.4982 min  0.704913
  --  mesh:  Nb of Triangles =    269, Nb of Vertices 170
Mesh adaptation done
Iteration 13 ----------------------------------------
  -- Solve : 
          min -0.0247646  max 0.120084
Compliance :0.402647-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -5.14926  max 5.82896
We increase the step size
Mesh moved
Actual Step 0.167555------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
 We lost 2  other edges 73
 Fatal error in the mesh generator 1100
  current line = 373
Meshing error: Bamg
 number : 1100, 
Meshing error: Bamg
 number : 1100, 
 err code 5 ,  mpirank 0
