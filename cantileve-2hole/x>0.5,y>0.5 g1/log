-- FreeFem++ v4.700001 (Sat Oct 17 12:48:33 CEST 2020 - git v4.7-64-g08041365)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : ////////////////////////////////////////////////
    2 : // Compliance Optimization                    //
    3 : // by the boundary variation method           //
    4 : // Copyright O.Pantz, G. Allaire (2005)       //
    5 : ////////////////////////////////////////////////
    6 : 
    7 : // Optimization Parameters 
    8 : int niter=60;			//Number of iterations
    9 : real errelas=0.01;		//Error for the resolution of the variational problems
   10 : real metricmsh=5.;		//Metric used for the coarse mesh: Bigger=finer mesh
   11 : real initialstep=0.2;		//Initial step
   12 : real maxstep=-1.;		//Maximum step (<0 => no limit)
   13 : real lagrangestep=3.;		//Updating step of the Lagrange multiplier associated to the Volume's constraint
   14 : bool tocontinue=false;		//false=start a new computation, true=continue a previous computation
   15 : string backupname="output";	//Name under which the results are stored
   16 : int nsave=1;			//Number of iterations to be saved
   17 : real volume0=95.;		//=0 Constant Volume during the iterations, >0 Target Volume, <0 No Volume's constraint
   18 : 
   19 : int np =10;
   20 : // construction of the initial mesh
   21 : 	mesh Sh,Th,Shprev,Thprev;
   22 : 	//Definition of the boundary labels
   23 : 	int neumann=1; int dirichlet=2;
   24 : 	int free=3;
   25 : 
   26 : 
   27 : 	int WALL = 1;
   28 : 	int LOAD = 2;
   29 : 	int FREE = 3;
   30 : //this is case 1
   31 : 	
   32 :  // border L11(t = 0.0, 0.5){x = t; y = 0.0; label = FREE;}
   33 :  //    border L21(t = 0.0, 0.45){x = 0.5; y = t; label = FREE;}
   34 :  //    border L22(t = 0.45, 0.55){x = 0.5; y = t; label = LOAD;}
   35 :  //    border L23(t = 0.55, 1.0){x = 0.5; y = t; label = FREE;}
   36 :  //    border L31(t = 0.5, 0){x = t; y = 1.0; label = FREE;}
   37 :  //    border L41(t = 1.0, 0.9){x = 0.0; y = t; label = WALL;}
   38 :  //    border L42(t = 0.9, 0.1){x = 0.0; y = t; label = FREE;}
   39 :  //    border L43(t = 0.1, 0.0){x = 0.0; y = t; label = WALL;}
   40 : 
   41 :  //    Sh = buildmesh(L11(5 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(5 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np));
   42 : 
   43 : 
   44 : //this is case 2
   45 : 
   46 : 	// real r = 0.15;                                                                    
   47 : 
   48 :  //    border L11(t = -1.0, 1.0){x = t; y = 0.0; label = FREE;}
   49 :  //    border L21(t = 0.0, 0.45){x = 1.0; y = t; label = FREE;}
   50 :  //    border L22(t = 0.45, 0.55){x = 1.0; y = t; label = LOAD;}
   51 :  //    border L23(t = 0.55, 1.0){x = 1.0; y = t; label = FREE;}
   52 :  //    border L31(t = 1.0, -1.0){x = t; y = 1.0; label = FREE;}
   53 :  //    border L41(t = 1.0, 0.9){x = -1.0; y = t; label = WALL;}
   54 :  //    border L42(t = 0.9, 0.1){x = -1.0; y = t; label = FREE;}
   55 :  //    border L43(t = 0.1, 0.0){x = -1.0; y = t; label = WALL;}
   56 : 
   57 :     
   58 :  //    border C11(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   59 :  //    border C12(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   60 :  //    border C21(t = 0, 2 * pi){x = -0.2 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   61 :  //    border C22(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   62 :  //    border C31(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   63 :  //    border C32(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   64 : 
   65 :  //    Sh = buildmesh(L11(20 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(20 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np)
   66 :  //                    + C11(-10 * np) + C12(-10 * np)  + C21(-10 * np) + C22(-10 * np) + C31(-10 * np) + C32(-10 * np));
   67 : 
   68 : 
   69 : //this is case 3
   70 : 
   71 : 	 real r = 0.2;                                                 
   72 : 
   73 :     border L11(t = 0.0, 1.0){x = t; y = 0.0; label = FREE;}
   74 :     border L21(t = 0.0, 0.2){x = 1.0; y = t; label = LOAD;}
   75 :     border L22(t = 0.2, 0.8){x = 1.0; y = t; label = FREE;}
   76 :     border L23(t = 0.8, 1.0){x = 1.0; y = t; label = LOAD;}
   77 :     border L31(t = 1.0, 0.0){x = t; y = 1.0; label = FREE;}
   78 :     border L41(t = 1.0, 0.95){x = 0.0; y = t; label = WALL;}
   79 :     border L42(t = 0.95, 0.05){x = 0.0; y = t; label = FREE;}
   80 :     border L43(t = 0.05, 0.0){x = 0.0; y = t; label = WALL;}
   81 : 
   82 :     
   83 :     border C11(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.25 + r * sin(t); label = FREE;}
   84 :     border C31(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.75 + r * sin(t); label = FREE;}
   85 : 
   86 :     Sh = buildmesh(L11(10 * np) + L21(2 * np) + L22(6 * np) + L23(2 * np) + L31(10 * np) + L41(1 * np) + L42(9 * np) + L43(1 * np)
   87 :         + C11(-15 * np) + C31(-15 * np)
   88 :         );
   89 : 
   90 : 
   91 : //this is case 4:
   92 : 
   93 : 	 // real r = 0.25;
   94 : 
   95 :   //   border L11(t = -1.0, -0.9){x = t; y = 0; label = FREE;}
   96 :   //   border L12(t = -0.9, -0.2){x = t; y = 0; label = FREE;}
   97 :   //   border L13(t = -0.2, 0.2){x = t; y = 0; label = FREE;}
   98 :   //   border L14(t = 0.2, 0.9){x = t; y = 0; label = FREE;}
   99 :   //   border L15(t = 0.9, 1.0){x = t; y = 0; label = FREE;}
  100 :     
  101 :   //   border L21(t = 0, 1.2){x = 1.0; y = t; label = FREE;}
  102 :   //   border L22(t = 1.0, -1.0){x = t; y = 1.2; label = FREE;}
  103 :   //   border L23(t = 1.2, 0){x = -1.0; y = t; label = FREE;}
  104 :     
  105 :   //   border C10(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  106 :   //   border C11(t = 0, 2 * pi){x = r * cos(t); y = 0.8 + r * sin(t); label = FREE;}
  107 :   //   border C12(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  108 : 
  109 :   //   Sh = buildmesh(L11(1 * np) + L12(7 * np) + L13(4 * np) + L14(7 * np) + L15(1 * np) + L21(12 * np) + L22(20 * np) + L23(12 * np) 
  110 :   //       + C10(-15 * np) + C11(-15 * np) + C12(-15 * np) 
  111 :   //       );
  112 : 
  113 : 
  114 : //this is case 5
  115 : // real r = 0.05;
  116 : 
  117 : //     border L11(t = 0.4, -0.4){x = t; y = 1.2; label = FREE;}
  118 : //     border L21(t = 1.2, 0.8){x = -0.4; y = t; label = FREE;}
  119 : //     border L31(t = -0.4, -0.35){x = t; y = 0.8; label = LOAD;}
  120 : //     border L32(t = -0.35, -0.2){x = t; y = 0.8; label = FREE;}
  121 : //     border L41(t = 0.8, 0.0){x = -0.2; y = t; label = FREE;}
  122 : //     border L51(t = -0.2, -0.15){x = t; y = 0.0; label = WALL;}
  123 : //     border L52(t = -0.15, 0.15){x = t; y = 0.0; label = FREE;}
  124 : //     border L53(t = 0.15, 0.2){x = t; y = 0.0; label = WALL;}
  125 : //     border L42(t = 0.0, 0.8){x = 0.2; y = t; label = FREE;}
  126 : //     border L33(t = 0.2, 0.35){x = t; y = 0.8; label = FREE;}
  127 : //     border L34(t = 0.35, 0.4){x = t; y = 0.8; label = LOAD;}
  128 : //     border L22(t = 0.8, 1.2){x = 0.4; y = t; label = FREE;}
  129 : 
  130 : //     border C1(t = 0, 2 * pi){x = -0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  131 : //     border C2(t = 0, 2 * pi){x = r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  132 : //     border C3(t = 0, 2 * pi){x = 0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  133 : 
  134 : //     Sh = buildmesh(L11(8 * np) + L21(4 * np) + L31(1 * np) + L32(2 * np) + L41(8 * np) + L51(np) + L52(3 * np) + L53(1 * np) 
  135 : //                     + L42(8 * np) + L33(2 * np) + L34(1 * np) + L22(4 * np) + C1(-7 * np) + C2(-7 * np) + C3(-7 * np));
  136 : 
  137 : 
  138 : 
  139 : // 	Th=Sh;
  140 : // 	Thprev=Th;
  141 : 
  142 : 	// cut function used to regularize the gradient shape near singularities
  143 : 	// func cut=1-(x>19.5)*(abs(y)<1.5)-(x<0.5)*(y>1.5)*(y<4.5)-(x<0.5)*(y<-1.5)*(y>-4.5);
  144 : 
  145 : 
  146 : 	func cut=(x > 0.5)*(y>0.5) ;
  147 : 
  148 : // Material parameters
  149 : 	real E=15.;				//Young Modulus (always positif)
  150 : 	real nu=0.35;				//Poisson ratio (between -1 and 1/2)
  151 : 	real lambda=E*nu/((1.+nu)*(1.-2.*nu));	//Lame Moduli
  152 : 	real mu=E/(2.*(1.+nu));
  153 : 
  154 : //Applied Loads
  155 : 	func g1=50; func g2=0;
  156 : 
  157 : //Definition of the variables and intialization
  158 : 	//Finite elements spaces on the finer mesh Sh
  159 : 		fespace Wh(Sh,P1);  		
  160 : 		fespace WSh(Sh,[P2,P2]);
  161 : 	//Finite elements spaces on the coarse mesh Th
  162 : 		fespace WTh(Th,[P2,P2]);	
  163 : 		
  164 : 	Wh gradient; 			//Gradient
  165 : 	WSh [d1,d2];			//extension field
  166 : 	WSh [theta1,theta2];		//test functions for the extension field
  167 : 	WSh [u1,u2],[v1,v2];		//Displacement and Test functions
  168 : 
  169 : 	//Interpolated Finite elements on the coarse mesh
  170 : 	WTh [D1,D2],[Dprev1,Dprev2]; 
  171 : 	WTh [U1,U2],[Uprev1,Uprev2];
  172 : 
  173 : 	int nsaved=0;			//Initialization counter of the back-up copies
  174 : 	int nsave0=100;			//Current number of back-up copies
  175 : 	real compliance;		//Compliance
  176 : 	real volume;
 *** Warning  The identifier volume hide a Global identifier  
			//Volume of the current shape
  177 : 	real perimeter;			//Perimeter of the optimized boundary
  178 : 	string caption;			//Caption for graphic outputs
  179 : 	real GradNorm;			//Gradient Norm
  180 : 	real GradProduct;		//Scalar product between the current gradient and the previous one
  181 : 	bool rollback=false;		//Did we roll back ?
  182 : 	real actualstep;		//Actual step size
  183 : 	real lagrange;			//Lagrange Multiplier associated to the Volume constraint
  184 : 	real[int] isoval(20);		//isovalue used for graphic outputs
  185 : 
  186 : 	int constrained=1;
  187 : 	if (volume0<0) {constrained=0;};
  188 : 
  189 : /////////////////////////
  190 : // Elasticity Problem  //
  191 : /////////////////////////
  192 : 	problem elasticity([u1,u2],[v1,v2]) =
  193 : 		int2d(Sh)(
  194 :         		2.*mu*(dx(u1)*dx(v1)+dy(u2)*dy(v2)+((dx(u2)+dy(u1))*(dx(v2)+dy(v1)))/2.)
  195 :               		+lambda*(dx(u1)+dy(u2))*(dx(v1)+dy(v2)))
  196 : 		-int1d(Sh,neumann)(g1*v1+g2*v2)	           
  197 :     	+on(FREE,u1=0,u2=0);
  198 : 
  199 : ////////////////////////////////////////
  200 : // Expression of the shape's Gradient //
  201 : ////////////////////////////////////////
  202 : 	macro gradientexp()
  203 # 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 # //
  205 : 
  206 : ///////////////////////
  207 : // Extension Problem //
  208 : ///////////////////////
  209 : //  H1 scalar product between vector-valued functions
  210 : 	macro prodscal(t1,t2,p1,p2)
  211 # 		dx(t1)*dx(p1)+dy(t1)*dy(p1)+dx(t2)*dx(p2)+dy(t2)*dy(p2)+t1*p1+t2*p2
  212 #  )  //
  213 : 	problem extension([d1,d2],[theta1,theta2]) =
  214 : 		int2d(Sh)(prodscal(d1,d2,theta1,theta2)
  211 @ 		
  212 @ 
  211 @ 		dx(d1)*dx(theta1)+dy(d1)*dy(theta1)+dx(d2)*dx(theta2)+dy(d2)*dy(theta2)+d1*theta1+d2*theta2
  212 @ )
  215 : 		+int1d(Sh,free) ((theta1*N.x+theta2*N.y)*(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @  + lagrange*constrained)*cut)
  216 : 	  +on(WALL,d1=0,d2=0);
  217 : 
  218 : //////////////////////////////
  219 : //      Initialization      //
  220 : //////////////////////////////
  221 : int iter,iter0;
  222 : string  backupnameNb;
  223 : if(!tocontinue){
  224 : 	iter0=1;
  225 : 	if (volume0==0) {volume0=int1d(Sh)(x*N.x+y*N.y)/2;}	// Computation of the initial Volume
  226 : 	elasticity;						// Solving the State Equation
  227 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);		// Initial Compliance
  228 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );				// Computation of the shape derivative
  229 : 
  230 : 	//Evaluation of the Lagrande Multiplier associated to the Volume constraint
  231 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  232 : 	gradient=(gradient-lagrange*constrained)*cut;
  233 : 
  234 : 	//Mesh Adaptation
  235 : 		Th=Sh;
  236 : 		[U1,U2]=[u1,u2];   //interpolation of u on the coarse mesh Th
  237 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[];
  238 : 		Sh=adaptmesh (Th,Uprev1,Uprev2,err=errelas);
  239 : 		actualstep=initialstep;			//Initialization of the initial step
  240 : 
  241 : 	//We save the intial shape
  242 : 	if (nsave!=0) {
  243 : 		//isovalue for graphic output
  244 : 			real gmax=gradient[].max;
  245 : 			real gmin=gradient[].min;
  246 : 			for (int j=0;j<isoval.n;j++) isoval[j]=gmin+(gmax-gmin)/isoval.n*j;
  247 : 		caption="Initial shape, Compliance "+compliance+", Volume "+volume0;
  248 : 		backupnameNb=backupname+nsaved;
  249 : 		plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps= "output/"+backupnameNb+".eps");};}
  250 : else {
  251 : // We recover the datas of a previous computation
  252 : 	// Updating of the meshs if we continue a previous computation
  253 : 		Sh=readmesh(backupname+".msh");
  254 : 		Th=readmesh(backupname+"-geo.msh");
  255 : 		Shprev=readmesh(backupname+"-prev.msh");
  256 : 		Thprev=readmesh(backupname+"-geo-prev.msh");
  257 : 	ifstream f(backupname+".txt");
  258 : 	if (volume0==0) {f >>volume0;} else {real next; f >>next;};
  259 : 	f >>lagrange;		//Lagrange Multiplier
  260 : 	f >>actualstep;		//Actual step size
  261 : 	f >>rollback;		//Did we roll back ?
  262 : 	f >>iter0;		//iteration de départ
  263 : 	f >>nsave0;		//Number of previous back-up copies
  264 : 	f >>isoval;
  265 : 	f >>Dprev1[];f>>Dprev2[];//Previous extenstion fields
  266 : 	nsaved=nsave0; 
  267 : 	nsave0=nsave0+1;};
  268 : 
  269 : /////////////////////////////////////
  270 : // Initialization of the Algorithm //
  271 : /////////////////////////////////////
  272 : 	elasticity;					//Solving the state equation
  273 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);	//Initial compliance
  274 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );			//Computation of the shape derivative
  275 : 	//Evaluation of the Lagrange Multiplier associated to the Volume constraint
  276 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  277 : 	gradient=(gradient-lagrange*constrained)*cut;
  278 : 
  279 : ///////////////////////////////
  280 : //     Optimization Loop     //
  281 : ///////////////////////////////
  282 : for (iter=iter0;iter< niter+iter0;iter=iter+1){
  283 : 	cout <<"Iteration " <<iter <<" ----------------------------------------" <<endl;
  284 : 
  285 : 	////////////////////////////
  286 : 	// Gradient's Computation //
  287 : 	////////////////////////////
  288 : 	elasticity;
  289 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  290 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ )*cut;
  291 : 	cout<<"Compliance :"<<compliance<<"-------------------------------------"<<endl;
  292 : 
  293 : 	[U1,U2]=[u1,u2];  //interpolation of u on the coarse mesh
  294 : 
  295 : 	//Update of the lagrange multiplier
  296 : 		volume=int1d(Sh)(x*N.x+y*N.y)/2;
  297 : 		perimeter=int1d(Sh,free)(cut);
  298 : 		lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter
  299 : 		+lagrangestep*(volume-volume0)/volume0;
  300 : 	gradient=gradient-lagrange*constrained*cut;
  301 : 	
  302 : 	/////////////////////
  303 : 	// Graphic Outputs //
  304 : 	/////////////////////
  305 : 	//isovalues
  306 : 		real gmax=gradient[].max;
  307 : 		for (int j=0;j<isoval.n;j++) 
  308 : 		isoval[j]=isoval[j]*(0.7*isoval[isoval.n-1]+0.3*gmax)/isoval[isoval.n-1];
  309 : 	caption="Iteration "+iter+", Compliance="+compliance+", Volume="+volume;
  310 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  311 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval);
  312 : 	
  313 : 	/////////////////////////
  314 : 	// Back-up Iterations  //
  315 : 	/////////////////////////
  316 : 	if ((nsaved-nsave0)*niter<(iter-iter0-1)*nsave) {
  317 : 	nsaved=nsaved+1;
  318 : 	caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  319 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  320 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps=backupnameNb);
  321 : 	savemesh(Sh,backupname+".msh");};
  322 : 
  323 : 	///////////////////////////////
  324 : 	// Modification of the shape //
  325 : 	///////////////////////////////
  326 : 	extension;		//Computation of the field [d1,d2]
  327 : 	[D1,D2]=[d1,d2];	//Interpolation on the coarse mesh
  328 : 
  329 : 	////////////////////////////////////
  330 : 	// Updating the step              //
  331 : 	////////////////////////////////////
  332 : 	GradNorm=int2d(Th)(prodscal(D1,D2,D1,D2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(D1)+dy(D1)*dy(D1)+dx(D2)*dx(D2)+dy(D2)*dy(D2)+D1*D1+D2*D2
  212 @ );
  333 : 	GradProduct=int2d(Th)(prodscal(D1,D2,Dprev1,Dprev2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(Dprev1)+dy(D1)*dy(Dprev1)+dx(D2)*dx(Dprev2)+dy(D2)*dy(Dprev2)+D1*Dprev1+D2*Dprev2
  212 @ );
  334 : 	if ((GradProduct<0.)&(!rollback)) {
  335 : 		actualstep=actualstep*GradNorm/(GradNorm-GradProduct)/4.; 
  336 :                 cout<<"Step too big: we step back !!!"<<endl; Th=Thprev; Sh=Shprev; rollback=true;}
  337 : 	else 
  338 : 		rollback=false;
  339 : 	if ((GradProduct>0.)&(GradProduct<(GradNorm/2.))){
  340 : 		actualstep=actualstep*2.*GradNorm/(2.*GradNorm-GradProduct); 
  341 :                 cout<<"We increase the step size"<<endl;};
  342 : 	if (GradProduct>(GradNorm/2.)){
  343 : 		actualstep=actualstep*4./3.;
  344 : 		cout<<"We increase the step size"<<endl;};
  345 : 	if(maxstep>0.) 
  346 : 		actualstep=min(actualstep,maxstep);
  347 : 	Thprev=Th;	//We keep a copy of the meshs (in case of backup at the next loop's step)
  348 : 	Shprev=Sh;
  349 : 
  350 : 	//////////////////////////////////
  351 : 	// We move the coarse mesh Th   //
  352 : 	//////////////////////////////////
  353 : 	if (!rollback){
  354 : 		real aa,minaire=checkmovemesh (Th,[x,y])/10000.;
  355 : 		while (minaire > (aa=checkmovemesh(Th,[x+actualstep*D1,y+actualstep*D2])) ){
  356 :   			cout << " problem reversed triangle  => actualstep= actual
  ... : step/2. "<<endl; 
  357 : 			actualstep= actualstep/2.;
  358 : 					}
  359 : 		Th = movemesh (Th,[x+actualstep*D1,y+actualstep*D2]);
  360 : 		cout<<"Mesh moved"<<endl;
  361 : 		cout<<"Actual Step "<<actualstep<<"------------------------------------"<<endl;
  362 : 		[Dprev1,Dprev2]=[0,0];
  363 : 		Dprev1[]=D1[];Dprev2[]=D2[];
  364 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[]; //Interpolation of u on the new mesh Th
  365 : 		};
  366 : 
  367 : 	//////////////////////
  368 : 	// Mesh Adaptation  //
  369 : 	//////////////////////
  370 : 	if (rollback){Sh=Shprev; } 		//We step back
  371 : 	else {
  372 : 		cout<<"Mesh adaptation of Sh"<<endl;
  373 : 		Sh=adaptmesh(Th,Uprev1,Uprev2,[Dprev1,Dprev2],err=errelas);
  374 : 		plot(Sh,wait=0);
  375 : 		cout<<"Mesh adaptation of the coarse mesh Th"<<endl;
  376 : 		Th=adaptmesh(Sh,metricmsh,0,metricmsh,IsMetric=1,ratio=0,omega=200,splitpbedge=1,hmin=0.05,abserror=1); }
  377 : 	cout<<"Mesh adaptation done"<<endl;
  378 : };
  379 : ///// END OF THE OPTIMIZATION LOOP /////
  380 : 
  381 : // Back-up    ///////////////////////////////////////////////
  382 : if (nsave!=0) {
  383 : 	//We save the meshes
  384 : 		savemesh(Sh,backupname+".msh");
  385 : 		savemesh(Shprev,backupname+"-prev.msh");
  386 : 		savemesh(Th,backupname+"-geo.msh");
  387 : 		savemesh(Th,backupname+"-geo-prev.msh");
  388 : 	//We save all variables
  389 : 		{ofstream f(backupname+".txt");
  390 : 		f << volume0<<"\n";	//Initial Volume
  391 : 		f <<lagrange<<"\n";	//Lagrange Multiplier
  392 : 		f <<actualstep<<"\n";	//Actual step
  393 : 		f <<rollback<<"\n";	//boolean variable
  394 : 		f <<iter<<"\n";		//Current Iteration
  395 : 		f <<nsaved+1<<"\n";	//Number of back-up done
  396 : 		f <<isoval<<"\n";
  397 : 		[Dprev1,Dprev2]=[Dprev1,Dprev2];
  398 : 		f <<Dprev1[]<<endl;f<<Dprev2[]<<endl;};
  399 : 	nsaved=nsaved+1;
  400 : 	elasticity;
  401 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );
  402 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  403 : 	cout<<"Compliance : "<<compliance<<"-------------------------------------"<<endl;
  404 : 	gradient=gradient*cut;
  405 : 	volume=int2d(Sh)(1.);
  406 : 	perimeter=int1d(Sh,free)(cut);
  407 : 	lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter+lagrangestep*(volume-volume0)/volume0;
  408 : 	gradient=gradient-lagrange*constrained*cut;
  409 : 	//Graphic output of the gradient
  410 : 		caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  411 : 		backupnameNb=backupname+nsaved+".eps";
  412 : 		plot(gradient,fill=1,value=0,cmm=caption,viso=isoval,ps="output/"+ backupnameNb);
  413 : };
  414 :  sizestack + 1024 =11400  ( 10376 )

  --  mesh:  Nb of Triangles =  19560, Nb of Vertices 10134
  -- Solve : 
          min -0.0272828  max 0.114321
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3483 , h  min 0.000833462 , h max 0.2
     area =  0.7514 , M area = 1511.43 , M area/( |Khat| nt) 1.00215
     infiny-regularity:  min 0.0761111  max 2.0615
     anisomax  6.90539, beta max = 3.67215 min  0.749072
  --  mesh:  Nb of Triangles =   3483, Nb of Vertices 1874
 Err opening postscript file output/output0.eps
  -- Solve : 
          min -0.027763  max 0.115569
Iteration 1 ----------------------------------------
  -- Solve : 
          min -0.027763  max 0.115569
Compliance :0.431264-------------------------------------
 Err opening postscript file output/output1.eps
  number of required edges : 0
  -- Solve : 
          min -0.77997  max 2.50469
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.05------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 3798 , h  min 0.000671803 , h max 0.122539
     area =  0.783234 , M area = 1673.32 , M area/( |Khat| nt) 1.01748
     infiny-regularity:  min 0.284521  max 1.85756
     anisomax  4.05733, beta max = 1.74166 min  0.779602
  --  mesh:  Nb of Triangles =   3798, Nb of Vertices 2056
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 233 , h  min 0.0015006 , h max 0.422721
     area =  0.783396 , M area = 17.0777 , M area/( |Khat| nt) 0.169267
     infiny-regularity:  min 0.00236193  max 29.0311
     anisomax  131.01, beta max = 41.6278 min  0.409192
  --  mesh:  Nb of Triangles =    233, Nb of Vertices 153
Mesh adaptation done
Iteration 2 ----------------------------------------
  -- Solve : 
          min -0.0263183  max 0.124839
Compliance :0.433559-------------------------------------
 Err opening postscript file output/output2.eps
  number of required edges : 0
  -- Solve : 
          min -0.903683  max 3.35226
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0333333------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2197 , h  min 0.00281032 , h max 0.135143
     area =  0.828961 , M area = 971.597 , M area/( |Khat| nt) 1.0213
     infiny-regularity:  min 0.144625  max 2.6541
     anisomax  8.37408, beta max = 2.44944 min  0.624263
  --  mesh:  Nb of Triangles =   2197, Nb of Vertices 1189
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 203 , h  min 0.00281032 , h max 0.503921
     area =  0.833977 , M area = 6.44317 , M area/( |Khat| nt) 0.0732998
     infiny-regularity:  min 0.00392312  max 4.19047
     anisomax  281.938, beta max = 40.3793 min  1.12353
  --  mesh:  Nb of Triangles =    203, Nb of Vertices 133
Mesh adaptation done
Iteration 3 ----------------------------------------
  -- Solve : 
          min -0.0250846  max 0.119602
Compliance :0.400105-------------------------------------
 Err opening postscript file output/output3.eps
  number of required edges : 0
  -- Solve : 
          min -1.12459  max 3.60688
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0111111------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2024 , h  min 0.00291141 , h max 0.14969
     area =  0.852877 , M area = 901.501 , M area/( |Khat| nt) 1.02862
     infiny-regularity:  min 0.193272  max 3.46412
     anisomax  19.5021, beta max = 1.28493 min  0.75371
  --  mesh:  Nb of Triangles =   2024, Nb of Vertices 1094
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 203 , h  min 0.00291141 , h max 0.503355
     area =  0.85683 , M area = 4.98038 , M area/( |Khat| nt) 0.0566586
     infiny-regularity:  min 0.00389819  max 1.53925
     anisomax  276.872, beta max = 41.8392 min  1.39923
  --  mesh:  Nb of Triangles =    203, Nb of Vertices 133
Mesh adaptation done
Iteration 4 ----------------------------------------
  -- Solve : 
          min -0.0229434  max 0.118388
Compliance :0.374673-------------------------------------
 Err opening postscript file output/output4.eps
  number of required edges : 0
  -- Solve : 
          min -1.16099  max 3.71744
We increase the step size
Mesh moved
Actual Step 0.0148148------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1848 , h  min 0.00298751 , h max 0.156086
     area =  0.886811 , M area = 825.575 , M area/( |Khat| nt) 1.0317
     infiny-regularity:  min 0.181187  max 7.77416
     anisomax  13.3454, beta max = 1.29437 min  0.57922
  --  mesh:  Nb of Triangles =   1848, Nb of Vertices 1005
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 197 , h  min 0.00298751 , h max 0.507699
     area =  0.891901 , M area = 6.54232 , M area/( |Khat| nt) 0.0766946
     infiny-regularity:  min 0.00380547  max 4.75756
     anisomax  272.529, beta max = 58.9874 min  1.16355
  --  mesh:  Nb of Triangles =    197, Nb of Vertices 129
Mesh adaptation done
Iteration 5 ----------------------------------------
  -- Solve : 
          min -0.0224034  max 0.118859
Compliance :0.373928-------------------------------------
 Err opening postscript file output/output5.eps
  number of required edges : 0
  -- Solve : 
          min -1.19655  max 3.85092
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00987654------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1982 , h  min 0.00303903 , h max 0.16334
     area =  0.912697 , M area = 886.504 , M area/( |Khat| nt) 1.03294
     infiny-regularity:  min 0.173155  max 6.45618
     anisomax  9.09566, beta max = 1.30929 min  0.565926
  --  mesh:  Nb of Triangles =   1982, Nb of Vertices 1074
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 194 , h  min 0.00303903 , h max 0.511358
     area =  0.918651 , M area = 6.30847 , M area/( |Khat| nt) 0.0750968
     infiny-regularity:  min 0.00378385  max 4.90917
     anisomax  270.324, beta max = 60.9097 min  1.1267
  --  mesh:  Nb of Triangles =    194, Nb of Vertices 127
Mesh adaptation done
Iteration 6 ----------------------------------------
  -- Solve : 
          min -0.0228991  max 0.11955
Compliance :0.381833-------------------------------------
 Err opening postscript file output/output6.eps
  number of required edges : 0
  -- Solve : 
          min -1.18276  max 3.84018
We increase the step size
Mesh moved
Actual Step 0.0131687------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1847 , h  min 0.00310707 , h max 0.154518
     area =  0.951226 , M area = 836.023 , M area/( |Khat| nt) 1.04532
     infiny-regularity:  min 0.176985  max 4.9997
     anisomax  9.6843, beta max = 1.80578 min  0.661944
  --  mesh:  Nb of Triangles =   1847, Nb of Vertices 1005
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 188 , h  min 0.00310707 , h max 0.515596
     area =  0.958951 , M area = 5.46329 , M area/( |Khat| nt) 0.0671113
     infiny-regularity:  min 0.00383899  max 1.74605
     anisomax  266.564, beta max = 44.7943 min  1.33714
  --  mesh:  Nb of Triangles =    188, Nb of Vertices 123
Mesh adaptation done
Iteration 7 ----------------------------------------
  -- Solve : 
          min -0.0225051  max 0.12102
Compliance :0.383128-------------------------------------
 Err opening postscript file output/output7.eps
  number of required edges : 0
  -- Solve : 
          min -1.10995  max 3.77272
We increase the step size
Mesh moved
Actual Step 0.0175583------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1779 , h  min 0.00317491 , h max 0.178651
     area =  1.0092 , M area = 793.112 , M area/( |Khat| nt) 1.02957
     infiny-regularity:  min 0.18826  max 6.37777
     anisomax  12.6313, beta max = 1.44263 min  0.557655
  --  mesh:  Nb of Triangles =   1779, Nb of Vertices 967
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 185 , h  min 0.00317491 , h max 0.524275
     area =  1.01637 , M area = 6.15208 , M area/( |Khat| nt) 0.0767979
     infiny-regularity:  min 0.00388861  max 1.918
     anisomax  264.089, beta max = 44.8224 min  1.28125
  --  mesh:  Nb of Triangles =    185, Nb of Vertices 121
Mesh adaptation done
Iteration 8 ----------------------------------------
  -- Solve : 
          min -0.0209713  max 0.118265
Compliance :0.370568-------------------------------------
 Err opening postscript file output/output8.eps
  number of required edges : 0
  -- Solve : 
          min -0.95419  max 3.71963
We increase the step size
Mesh moved
Actual Step 0.0234111------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1835 , h  min 0.00317996 , h max 0.13202
     area =  1.09228 , M area = 819.479 , M area/( |Khat| nt) 1.03134
     infiny-regularity:  min 0.170152  max 4.20921
     anisomax  9.53128, beta max = 1.34061 min  0.704698
  --  mesh:  Nb of Triangles =   1835, Nb of Vertices 997
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 169 , h  min 0.00317996 , h max 0.53489
     area =  1.10211 , M area = 7.02889 , M area/( |Khat| nt) 0.0960505
     infiny-regularity:  min 0.00389287  max 5.01925
     anisomax  263.955, beta max = 44.7307 min  0.993399
  --  mesh:  Nb of Triangles =    169, Nb of Vertices 112
Mesh adaptation done
Iteration 9 ----------------------------------------
  -- Solve : 
          min -0.0203125  max 0.12023
Compliance :0.37004-------------------------------------
 Err opening postscript file output/output9.eps
  number of required edges : 0
  -- Solve : 
          min -0.569466  max 3.6693
We increase the step size
Mesh moved
Actual Step 0.0312148------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1849 , h  min 0.0032099 , h max 0.128941
     area =  1.22871 , M area = 831.864 , M area/( |Khat| nt) 1.039
     infiny-regularity:  min 0.204039  max 2.13075
     anisomax  17.4685, beta max = 1.63572 min  0.727391
  --  mesh:  Nb of Triangles =   1849, Nb of Vertices 1005
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 162 , h  min 0.0032099 , h max 0.556964
     area =  1.23911 , M area = 8.75396 , M area/( |Khat| nt) 0.124793
     infiny-regularity:  min 0.00386944  max 8.27789
     anisomax  263.717, beta max = 44.0751 min  0.927407
  --  mesh:  Nb of Triangles =    162, Nb of Vertices 107
Mesh adaptation done
Iteration 10 ----------------------------------------
  -- Solve : 
          min -0.0203225  max 0.1245
Compliance :0.375243-------------------------------------
 Err opening postscript file output/output10.eps
  number of required edges : 0
  -- Solve : 
          min -0.406109  max 3.60165
We increase the step size
Mesh moved
Actual Step 0.0416197------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1904 , h  min 0.00321419 , h max 0.153029
     area =  1.44037 , M area = 840.694 , M area/( |Khat| nt) 1.01969
     infiny-regularity:  min 0.146836  max 2.06365
     anisomax  26.2124, beta max = 2.02215 min  0.749549
  --  mesh:  Nb of Triangles =   1904, Nb of Vertices 1034
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 156 , h  min 0.00321419 , h max 0.615616
     area =  1.45093 , M area = 11.1316 , M area/( |Khat| nt) 0.164791
     infiny-regularity:  min 0.0038225  max 5.13669
     anisomax  263.666, beta max = 42.9886 min  0.854358
  --  mesh:  Nb of Triangles =    156, Nb of Vertices 103
Mesh adaptation done
Iteration 11 ----------------------------------------
  -- Solve : 
          min -0.0193862  max 0.124464
Compliance :0.371964-------------------------------------
 Err opening postscript file output/output11.eps
  number of required edges : 0
  -- Solve : 
          min -0.675486  max 3.60345
We increase the step size
Mesh moved
Actual Step 0.0554929------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1859 , h  min 0.00320907 , h max 0.149656
     area =  1.80008 , M area = 826.246 , M area/( |Khat| nt) 1.02643
     infiny-regularity:  min 0.111488  max 2.90358
     anisomax  34.2311, beta max = 2.74253 min  0.661858
  --  mesh:  Nb of Triangles =   1859, Nb of Vertices 1010
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 150 , h  min 0.00320907 , h max 0.635766
     area =  1.8018 , M area = 9.88868 , M area/( |Khat| nt) 0.152246
     infiny-regularity:  min 0.00375999  max 2.86789
     anisomax  268.019, beta max = 41.5493 min  0.80836
  --  mesh:  Nb of Triangles =    150, Nb of Vertices 99
Mesh adaptation done
Iteration 12 ----------------------------------------
  -- Solve : 
          min -0.0204663  max 0.126345
Compliance :0.374746-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -0.737308  max 5.00477
We increase the step size
Mesh moved
Actual Step 0.0739905------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1643 , h  min 0.00320437 , h max 0.193669
     area =  2.39698 , M area = 731.703 , M area/( |Khat| nt) 1.02848
     infiny-regularity:  min 0.0960579  max 2.11683
     anisomax  28.7824, beta max = 2.95616 min  0.750517
  --  mesh:  Nb of Triangles =   1643, Nb of Vertices 900
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 155 , h  min 0.00320437 , h max 0.654282
     area =  2.40417 , M area = 12.3678 , M area/( |Khat| nt) 0.184272
     infiny-regularity:  min 0.0036413  max 2.36101
     anisomax  284.439, beta max = 37.8557 min  0.943359
  --  mesh:  Nb of Triangles =    155, Nb of Vertices 102
Mesh adaptation done
Iteration 13 ----------------------------------------
  -- Solve : 
          min -0.0149902  max 0.112837
Compliance :0.344473-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.47137  max 3.88181
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00616588------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1822 , h  min 0.00318905 , h max 0.22086
     area =  2.46303 , M area = 806.935 , M area/( |Khat| nt) 1.0228
     infiny-regularity:  min 0.166538  max 5.66644
     anisomax  14.6465, beta max = 1.51096 min  0.723411
  --  mesh:  Nb of Triangles =   1822, Nb of Vertices 991
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 153 , h  min 0.00318905 , h max 0.668675
     area =  2.46954 , M area = 12.6008 , M area/( |Khat| nt) 0.190198
     infiny-regularity:  min 0.00362811  max 2.14485
     anisomax  284.46, beta max = 38.1624 min  0.769426
  --  mesh:  Nb of Triangles =    153, Nb of Vertices 101
Mesh adaptation done
Iteration 14 ----------------------------------------
  -- Solve : 
          min -0.021044  max 0.126935
Compliance :0.379508-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -3.10428  max 4.08204
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00411058------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1886 , h  min 0.0031819 , h max 0.228546
     area =  2.5083 , M area = 830.614 , M area/( |Khat| nt) 1.01708
     infiny-regularity:  min 0.149481  max 4.84561
     anisomax  29.1364, beta max = 1.48701 min  0.615487
  --  mesh:  Nb of Triangles =   1886, Nb of Vertices 1026
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 156 , h  min 0.0031819 , h max 0.594049
     area =  2.51408 , M area = 12.7843 , M area/( |Khat| nt) 0.189257
     infiny-regularity:  min 0.00362307  max 1.93317
     anisomax  283.628, beta max = 38.3491 min  0.869466
  --  mesh:  Nb of Triangles =    156, Nb of Vertices 103
Mesh adaptation done
Iteration 15 ----------------------------------------
  -- Solve : 
          min -0.0188145  max 0.126725
Compliance :0.386563-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.94838  max 4.19114
We increase the step size
Mesh moved
Actual Step 0.00548078------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1814 , h  min 0.00317051 , h max 0.223252
     area =  2.56989 , M area = 805.32 , M area/( |Khat| nt) 1.02525
     infiny-regularity:  min 0.145352  max 5.4403
     anisomax  11.8343, beta max = 1.54739 min  0.55593
  --  mesh:  Nb of Triangles =   1814, Nb of Vertices 990
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 156 , h  min 0.00317051 , h max 0.594234
     area =  2.57448 , M area = 13.0474 , M area/( |Khat| nt) 0.193151
     infiny-regularity:  min 0.00361329  max 1.74528
     anisomax  283.439, beta max = 38.5925 min  0.870939
  --  mesh:  Nb of Triangles =    156, Nb of Vertices 103
Mesh adaptation done
Iteration 16 ----------------------------------------
  -- Solve : 
          min -0.0184843  max 0.126467
Compliance :0.38694-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.79671  max 4.35514
We increase the step size
Mesh moved
Actual Step 0.00730771------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 2015 , h  min 0.00315768 , h max 0.188331
     area =  2.65204 , M area = 895.492 , M area/( |Khat| nt) 1.02633
     infiny-regularity:  min 0.154768  max 6.13226
     anisomax  12.2198, beta max = 1.41894 min  0.615214
  --  mesh:  Nb of Triangles =   2015, Nb of Vertices 1096
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 156 , h  min 0.00315768 , h max 0.612547
     area =  2.65561 , M area = 13.625 , M area/( |Khat| nt) 0.201703
     infiny-regularity:  min 0.00360319  max 1.69323
     anisomax  282.986, beta max = 39.149 min  0.8486
  --  mesh:  Nb of Triangles =    156, Nb of Vertices 103
Mesh adaptation done
Iteration 17 ----------------------------------------
  -- Solve : 
          min -0.0192236  max 0.126903
Compliance :0.388128-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.23398  max 5.95983
We increase the step size
Mesh moved
Actual Step 0.00974361------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1837 , h  min 0.00316632 , h max 0.230081
     area =  2.75149 , M area = 809.687 , M area/( |Khat| nt) 1.01791
     infiny-regularity:  min 0.131531  max 2.66804
     anisomax  28.9728, beta max = 2.14267 min  0.744296
  --  mesh:  Nb of Triangles =   1837, Nb of Vertices 1003
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 153 , h  min 0.00316632 , h max 0.667656
     area =  2.75669 , M area = 13.9523 , M area/( |Khat| nt) 0.210598
     infiny-regularity:  min 0.00360321  max 1.70538
     anisomax  283.976, beta max = 38.5682 min  0.859319
  --  mesh:  Nb of Triangles =    153, Nb of Vertices 101
Mesh adaptation done
Iteration 18 ----------------------------------------
  -- Solve : 
          min -0.0190694  max 0.126676
Compliance :0.392718-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -1.09734  max 5.66364
We increase the step size
Mesh moved
Actual Step 0.0129915------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1814 , h  min 0.00317088 , h max 0.274333
     area =  2.88797 , M area = 805.164 , M area/( |Khat| nt) 1.02505
     infiny-regularity:  min 0.069783  max 2.54422
     anisomax  54.7929, beta max = 2.85028 min  0.675675
  --  mesh:  Nb of Triangles =   1814, Nb of Vertices 992
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 159 , h  min 0.00317088 , h max 0.643628
     area =  2.89524 , M area = 14.655 , M area/( |Khat| nt) 0.212857
     infiny-regularity:  min 0.0036032  max 1.7481
     anisomax  284.193, beta max = 37.5175 min  0.899483
  --  mesh:  Nb of Triangles =    159, Nb of Vertices 104
Mesh adaptation done
Iteration 19 ----------------------------------------
  -- Solve : 
          min -0.0212899  max 0.125803
Compliance :0.383883-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -2.52016  max 4.92383
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00866099------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1902 , h  min 0.00315772 , h max 0.229829
     area =  2.99501 , M area = 840.518 , M area/( |Khat| nt) 1.02055
     infiny-regularity:  min 0.13419  max 8.4195
     anisomax  10.0549, beta max = 1.68578 min  0.50545
  --  mesh:  Nb of Triangles =   1902, Nb of Vertices 1036
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 153 , h  min 0.00315772 , h max 0.667653
     area =  3.0006 , M area = 15.1288 , M area/( |Khat| nt) 0.228355
     infiny-regularity:  min 0.0035927  max 1.60991
     anisomax  283.582, beta max = 38.9747 min  0.815135
  --  mesh:  Nb of Triangles =    153, Nb of Vertices 101
Mesh adaptation done
Iteration 20 ----------------------------------------
  -- Solve : 
          min -0.0186475  max 0.12671
Compliance :0.390146-------------------------------------
  number of required edges : 0
  -- Solve : 
          min -0.956003  max 6.32745
We increase the step size
Mesh moved
Actual Step 0.011548------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 1778 , h  min 0.00317708 , h max 0.266262
     area =  3.1258 , M area = 792.928 , M area/( |Khat| nt) 1.02992
     infiny-regularity:  min 0.146983  max 2.60635
     anisomax  12.7369, beta max = 2.237 min  0.772556
  --  mesh:  Nb of Triangles =   1778, Nb of Vertices 974
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
