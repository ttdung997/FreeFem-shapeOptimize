-- FreeFem++ v4.700001 (Sat Oct 17 12:48:33 CEST 2020 - git v4.7-64-g08041365)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : ////////////////////////////////////////////////
    2 : // Compliance Optimization                    //
    3 : // by the boundary variation method           //
    4 : // Copyright O.Pantz, G. Allaire (2005)       //
    5 : ////////////////////////////////////////////////
    6 : 
    7 : // Optimization Parameters 
    8 : int niter=60;			//Number of iterations
    9 : real errelas=0.01;		//Error for the resolution of the variational problems
   10 : real metricmsh=5.;		//Metric used for the coarse mesh: Bigger=finer mesh
   11 : real initialstep=0.2;		//Initial step
   12 : real maxstep=-1.;		//Maximum step (<0 => no limit)
   13 : real lagrangestep=3.;		//Updating step of the Lagrange multiplier associated to the Volume's constraint
   14 : bool tocontinue=false;		//false=start a new computation, true=continue a previous computation
   15 : string backupname="output";	//Name under which the results are stored
   16 : int nsave=1;			//Number of iterations to be saved
   17 : real volume0=95.;		//=0 Constant Volume during the iterations, >0 Target Volume, <0 No Volume's constraint
   18 : 
   19 : int np =10;
   20 : // construction of the initial mesh
   21 : 	mesh Sh,Th,Shprev,Thprev;
   22 : 	//Definition of the boundary labels
   23 : 	int neumann=1; int dirichlet=2;
   24 : 	int free=3;
   25 : 
   26 : 
   27 : 	int WALL = 1;
   28 : 	int LOAD = 2;
   29 : 	int FREE = 3;
   30 : //this is case 1
   31 : 	
   32 :  // border L11(t = 0.0, 0.5){x = t; y = 0.0; label = FREE;}
   33 :  //    border L21(t = 0.0, 0.45){x = 0.5; y = t; label = FREE;}
   34 :  //    border L22(t = 0.45, 0.55){x = 0.5; y = t; label = LOAD;}
   35 :  //    border L23(t = 0.55, 1.0){x = 0.5; y = t; label = FREE;}
   36 :  //    border L31(t = 0.5, 0){x = t; y = 1.0; label = FREE;}
   37 :  //    border L41(t = 1.0, 0.9){x = 0.0; y = t; label = WALL;}
   38 :  //    border L42(t = 0.9, 0.1){x = 0.0; y = t; label = FREE;}
   39 :  //    border L43(t = 0.1, 0.0){x = 0.0; y = t; label = WALL;}
   40 : 
   41 :  //    Sh = buildmesh(L11(5 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(5 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np));
   42 : 
   43 : 
   44 : //this is case 2
   45 : 
   46 : 	// real r = 0.15;                                                                    
   47 : 
   48 :  //    border L11(t = -1.0, 1.0){x = t; y = 0.0; label = FREE;}
   49 :  //    border L21(t = 0.0, 0.45){x = 1.0; y = t; label = FREE;}
   50 :  //    border L22(t = 0.45, 0.55){x = 1.0; y = t; label = LOAD;}
   51 :  //    border L23(t = 0.55, 1.0){x = 1.0; y = t; label = FREE;}
   52 :  //    border L31(t = 1.0, -1.0){x = t; y = 1.0; label = FREE;}
   53 :  //    border L41(t = 1.0, 0.9){x = -1.0; y = t; label = WALL;}
   54 :  //    border L42(t = 0.9, 0.1){x = -1.0; y = t; label = FREE;}
   55 :  //    border L43(t = 0.1, 0.0){x = -1.0; y = t; label = WALL;}
   56 : 
   57 :     
   58 :  //    border C11(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   59 :  //    border C12(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.22 + r * sin(t); label = FREE;}
   60 :  //    border C21(t = 0, 2 * pi){x = -0.2 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   61 :  //    border C22(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.5 + r * sin(t); label = FREE;}
   62 :  //    border C31(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   63 :  //    border C32(t = 0, 2 * pi){x = 0.2 + r * cos(t); y = 0.78 + r * sin(t); label = FREE;}
   64 : 
   65 :  //    Sh = buildmesh(L11(20 * np) + L21(5 * np) + L22(1 * np) + L23(5 * np) + L31(20 * np) + L41(1 * np) + L42(8 * np) + L43(1 * np)
   66 :  //                    + C11(-10 * np) + C12(-10 * np)  + C21(-10 * np) + C22(-10 * np) + C31(-10 * np) + C32(-10 * np));
   67 : 
   68 : 
   69 : //this is case 3
   70 : 
   71 : 	 // real r = 0.2;                                                 
   72 : 
   73 :   //   border L11(t = 0.0, 1.0){x = t; y = 0.0; label = FREE;}
   74 :   //   border L21(t = 0.0, 0.2){x = 1.0; y = t; label = LOAD;}
   75 :   //   border L22(t = 0.2, 0.8){x = 1.0; y = t; label = FREE;}
   76 :   //   border L23(t = 0.8, 1.0){x = 1.0; y = t; label = LOAD;}
   77 :   //   border L31(t = 1.0, 0.0){x = t; y = 1.0; label = FREE;}
   78 :   //   border L41(t = 1.0, 0.95){x = 0.0; y = t; label = WALL;}
   79 :   //   border L42(t = 0.95, 0.05){x = 0.0; y = t; label = FREE;}
   80 :   //   border L43(t = 0.05, 0.0){x = 0.0; y = t; label = WALL;}
   81 : 
   82 :     
   83 :   //   border C11(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.25 + r * sin(t); label = FREE;}
   84 :   //   border C31(t = 0, 2 * pi){x = 0.5 + r * cos(t); y = 0.75 + r * sin(t); label = FREE;}
   85 : 
   86 :   //   Sh = buildmesh(L11(10 * np) + L21(2 * np) + L22(6 * np) + L23(2 * np) + L31(10 * np) + L41(1 * np) + L42(9 * np) + L43(1 * np)
   87 :   //       + C11(-15 * np) + C31(-15 * np)
   88 :   //       );
   89 : 
   90 : 
   91 : //this is case 4:
   92 : 
   93 : 	 real r = 0.25;
   94 : 
   95 :     border L11(t = -1.0, -0.9){x = t; y = 0; label = FREE;}
   96 :     border L12(t = -0.9, -0.2){x = t; y = 0; label = FREE;}
   97 :     border L13(t = -0.2, 0.2){x = t; y = 0; label = FREE;}
   98 :     border L14(t = 0.2, 0.9){x = t; y = 0; label = FREE;}
   99 :     border L15(t = 0.9, 1.0){x = t; y = 0; label = FREE;}
  100 :     
  101 :     border L21(t = 0, 1.2){x = 1.0; y = t; label = FREE;}
  102 :     border L22(t = 1.0, -1.0){x = t; y = 1.2; label = FREE;}
  103 :     border L23(t = 1.2, 0){x = -1.0; y = t; label = FREE;}
  104 :     
  105 :     border C10(t = 0, 2 * pi){x = -0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  106 :     border C11(t = 0, 2 * pi){x = r * cos(t); y = 0.8 + r * sin(t); label = FREE;}
  107 :     border C12(t = 0, 2 * pi){x = 0.6 + r * cos(t); y = 0.4 + r * sin(t); label = FREE;}
  108 : 
  109 :     Sh = buildmesh(L11(1 * np) + L12(7 * np) + L13(4 * np) + L14(7 * np) + L15(1 * np) + L21(12 * np) + L22(20 * np) + L23(12 * np) 
  110 :         + C10(-15 * np) + C11(-15 * np) + C12(-15 * np) 
  111 :         );
  112 : 
  113 : 
  114 : //this is case 5
  115 : // real r = 0.05;
  116 : 
  117 : //     border L11(t = 0.4, -0.4){x = t; y = 1.2; label = FREE;}
  118 : //     border L21(t = 1.2, 0.8){x = -0.4; y = t; label = FREE;}
  119 : //     border L31(t = -0.4, -0.35){x = t; y = 0.8; label = LOAD;}
  120 : //     border L32(t = -0.35, -0.2){x = t; y = 0.8; label = FREE;}
  121 : //     border L41(t = 0.8, 0.0){x = -0.2; y = t; label = FREE;}
  122 : //     border L51(t = -0.2, -0.15){x = t; y = 0.0; label = WALL;}
  123 : //     border L52(t = -0.15, 0.15){x = t; y = 0.0; label = FREE;}
  124 : //     border L53(t = 0.15, 0.2){x = t; y = 0.0; label = WALL;}
  125 : //     border L42(t = 0.0, 0.8){x = 0.2; y = t; label = FREE;}
  126 : //     border L33(t = 0.2, 0.35){x = t; y = 0.8; label = FREE;}
  127 : //     border L34(t = 0.35, 0.4){x = t; y = 0.8; label = LOAD;}
  128 : //     border L22(t = 0.8, 1.2){x = 0.4; y = t; label = FREE;}
  129 : 
  130 : //     border C1(t = 0, 2 * pi){x = -0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  131 : //     border C2(t = 0, 2 * pi){x = r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  132 : //     border C3(t = 0, 2 * pi){x = 0.25 + r * cos(t); y = 1.0 + r * sin(t); label = FREE;}
  133 : 
  134 : //     Sh = buildmesh(L11(8 * np) + L21(4 * np) + L31(1 * np) + L32(2 * np) + L41(8 * np) + L51(np) + L52(3 * np) + L53(1 * np) 
  135 : //                     + L42(8 * np) + L33(2 * np) + L34(1 * np) + L22(4 * np) + C1(-7 * np) + C2(-7 * np) + C3(-7 * np));
  136 : 
  137 : 
  138 : 
  139 : // 	Th=Sh;
  140 : // 	Thprev=Th;
  141 : 
  142 : 	// cut function used to regularize the gradient shape near singularities
  143 : 	// func cut=1-(x>19.5)*(abs(y)<1.5)-(x<0.5)*(y>1.5)*(y<4.5)-(x<0.5)*(y<-1.5)*(y>-4.5);
  144 : 
  145 : 
  146 : 	func cut=(abs(x) < 0.4) ;
  147 : 
  148 : // Material parameters
  149 : 	real E=15.;				//Young Modulus (always positif)
  150 : 	real nu=0.35;				//Poisson ratio (between -1 and 1/2)
  151 : 	real lambda=E*nu/((1.+nu)*(1.-2.*nu));	//Lame Moduli
  152 : 	real mu=E/(2.*(1.+nu));
  153 : 
  154 : //Applied Loads
  155 : 	func g1=0; func g2=50;
  156 : 
  157 : //Definition of the variables and intialization
  158 : 	//Finite elements spaces on the finer mesh Sh
  159 : 		fespace Wh(Sh,P1);  		
  160 : 		fespace WSh(Sh,[P2,P2]);
  161 : 	//Finite elements spaces on the coarse mesh Th
  162 : 		fespace WTh(Th,[P2,P2]);	
  163 : 		
  164 : 	Wh gradient; 			//Gradient
  165 : 	WSh [d1,d2];			//extension field
  166 : 	WSh [theta1,theta2];		//test functions for the extension field
  167 : 	WSh [u1,u2],[v1,v2];		//Displacement and Test functions
  168 : 
  169 : 	//Interpolated Finite elements on the coarse mesh
  170 : 	WTh [D1,D2],[Dprev1,Dprev2]; 
  171 : 	WTh [U1,U2],[Uprev1,Uprev2];
  172 : 
  173 : 	int nsaved=0;			//Initialization counter of the back-up copies
  174 : 	int nsave0=100;			//Current number of back-up copies
  175 : 	real compliance;		//Compliance
  176 : 	real volume;
 *** Warning  The identifier volume hide a Global identifier  
			//Volume of the current shape
  177 : 	real perimeter;			//Perimeter of the optimized boundary
  178 : 	string caption;			//Caption for graphic outputs
  179 : 	real GradNorm;			//Gradient Norm
  180 : 	real GradProduct;		//Scalar product between the current gradient and the previous one
  181 : 	bool rollback=false;		//Did we roll back ?
  182 : 	real actualstep;		//Actual step size
  183 : 	real lagrange;			//Lagrange Multiplier associated to the Volume constraint
  184 : 	real[int] isoval(20);		//isovalue used for graphic outputs
  185 : 
  186 : 	int constrained=1;
  187 : 	if (volume0<0) {constrained=0;};
  188 : 
  189 : /////////////////////////
  190 : // Elasticity Problem  //
  191 : /////////////////////////
  192 : 	problem elasticity([u1,u2],[v1,v2]) =
  193 : 		int2d(Sh)(
  194 :         		2.*mu*(dx(u1)*dx(v1)+dy(u2)*dy(v2)+((dx(u2)+dy(u1))*(dx(v2)+dy(v1)))/2.)
  195 :               		+lambda*(dx(u1)+dy(u2))*(dx(v1)+dy(v2)))
  196 : 		-int1d(Sh,neumann)(g1*v1+g2*v2)	           
  197 :     	+on(FREE,u1=0,u2=0);
  198 : 
  199 : ////////////////////////////////////////
  200 : // Expression of the shape's Gradient //
  201 : ////////////////////////////////////////
  202 : 	macro gradientexp()
  203 # 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 # //
  205 : 
  206 : ///////////////////////
  207 : // Extension Problem //
  208 : ///////////////////////
  209 : //  H1 scalar product between vector-valued functions
  210 : 	macro prodscal(t1,t2,p1,p2)
  211 # 		dx(t1)*dx(p1)+dy(t1)*dy(p1)+dx(t2)*dx(p2)+dy(t2)*dy(p2)+t1*p1+t2*p2
  212 #  )  //
  213 : 	problem extension([d1,d2],[theta1,theta2]) =
  214 : 		int2d(Sh)(prodscal(d1,d2,theta1,theta2)
  211 @ 		
  212 @ 
  211 @ 		dx(d1)*dx(theta1)+dy(d1)*dy(theta1)+dx(d2)*dx(theta2)+dy(d2)*dy(theta2)+d1*theta1+d2*theta2
  212 @ )
  215 : 		+int1d(Sh,free) ((theta1*N.x+theta2*N.y)*(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @  + lagrange*constrained)*cut)
  216 : 	  +on(WALL,d1=0,d2=0);
  217 : 
  218 : //////////////////////////////
  219 : //      Initialization      //
  220 : //////////////////////////////
  221 : int iter,iter0;
  222 : string  backupnameNb;
  223 : if(!tocontinue){
  224 : 	iter0=1;
  225 : 	if (volume0==0) {volume0=int1d(Sh)(x*N.x+y*N.y)/2;}	// Computation of the initial Volume
  226 : 	elasticity;						// Solving the State Equation
  227 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);		// Initial Compliance
  228 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );				// Computation of the shape derivative
  229 : 
  230 : 	//Evaluation of the Lagrande Multiplier associated to the Volume constraint
  231 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  232 : 	gradient=(gradient-lagrange*constrained)*cut;
  233 : 
  234 : 	//Mesh Adaptation
  235 : 		Th=Sh;
  236 : 		[U1,U2]=[u1,u2];   //interpolation of u on the coarse mesh Th
  237 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[];
  238 : 		Sh=adaptmesh (Th,Uprev1,Uprev2,err=errelas);
  239 : 		actualstep=initialstep;			//Initialization of the initial step
  240 : 
  241 : 	//We save the intial shape
  242 : 	if (nsave!=0) {
  243 : 		//isovalue for graphic output
  244 : 			real gmax=gradient[].max;
  245 : 			real gmin=gradient[].min;
  246 : 			for (int j=0;j<isoval.n;j++) isoval[j]=gmin+(gmax-gmin)/isoval.n*j;
  247 : 		caption="Initial shape, Compliance "+compliance+", Volume "+volume0;
  248 : 		backupnameNb=backupname+nsaved;
  249 : 		plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps= "output/"+backupnameNb+".eps");};}
  250 : else {
  251 : // We recover the datas of a previous computation
  252 : 	// Updating of the meshs if we continue a previous computation
  253 : 		Sh=readmesh(backupname+".msh");
  254 : 		Th=readmesh(backupname+"-geo.msh");
  255 : 		Shprev=readmesh(backupname+"-prev.msh");
  256 : 		Thprev=readmesh(backupname+"-geo-prev.msh");
  257 : 	ifstream f(backupname+".txt");
  258 : 	if (volume0==0) {f >>volume0;} else {real next; f >>next;};
  259 : 	f >>lagrange;		//Lagrange Multiplier
  260 : 	f >>actualstep;		//Actual step size
  261 : 	f >>rollback;		//Did we roll back ?
  262 : 	f >>iter0;		//iteration de départ
  263 : 	f >>nsave0;		//Number of previous back-up copies
  264 : 	f >>isoval;
  265 : 	f >>Dprev1[];f>>Dprev2[];//Previous extenstion fields
  266 : 	nsaved=nsave0; 
  267 : 	nsave0=nsave0+1;};
  268 : 
  269 : /////////////////////////////////////
  270 : // Initialization of the Algorithm //
  271 : /////////////////////////////////////
  272 : 	elasticity;					//Solving the state equation
  273 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);	//Initial compliance
  274 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );			//Computation of the shape derivative
  275 : 	//Evaluation of the Lagrange Multiplier associated to the Volume constraint
  276 : 	lagrange=int1d(Sh,free)(gradient*cut)/int1d(Sh,free)(cut);
  277 : 	gradient=(gradient-lagrange*constrained)*cut;
  278 : 
  279 : ///////////////////////////////
  280 : //     Optimization Loop     //
  281 : ///////////////////////////////
  282 : for (iter=iter0;iter< niter+iter0;iter=iter+1){
  283 : 	cout <<"Iteration " <<iter <<" ----------------------------------------" <<endl;
  284 : 
  285 : 	////////////////////////////
  286 : 	// Gradient's Computation //
  287 : 	////////////////////////////
  288 : 	elasticity;
  289 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  290 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ )*cut;
  291 : 	cout<<"Compliance :"<<compliance<<"-------------------------------------"<<endl;
  292 : 
  293 : 	[U1,U2]=[u1,u2];  //interpolation of u on the coarse mesh
  294 : 
  295 : 	//Update of the lagrange multiplier
  296 : 		volume=int1d(Sh)(x*N.x+y*N.y)/2;
  297 : 		perimeter=int1d(Sh,free)(cut);
  298 : 		lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter
  299 : 		+lagrangestep*(volume-volume0)/volume0;
  300 : 	gradient=gradient-lagrange*constrained*cut;
  301 : 	
  302 : 	/////////////////////
  303 : 	// Graphic Outputs //
  304 : 	/////////////////////
  305 : 	//isovalues
  306 : 		real gmax=gradient[].max;
  307 : 		for (int j=0;j<isoval.n;j++) 
  308 : 		isoval[j]=isoval[j]*(0.7*isoval[isoval.n-1]+0.3*gmax)/isoval[isoval.n-1];
  309 : 	caption="Iteration "+iter+", Compliance="+compliance+", Volume="+volume;
  310 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  311 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval);
  312 : 	
  313 : 	/////////////////////////
  314 : 	// Back-up Iterations  //
  315 : 	/////////////////////////
  316 : 	if ((nsaved-nsave0)*niter<(iter-iter0-1)*nsave) {
  317 : 	nsaved=nsaved+1;
  318 : 	caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  319 : 	backupnameNb="output/"+backupname+nsaved+".eps";
  320 : 	plot(gradient,fill=1,value=1,cmm=caption,viso=isoval,ps=backupnameNb);
  321 : 	savemesh(Sh,backupname+".msh");};
  322 : 
  323 : 	///////////////////////////////
  324 : 	// Modification of the shape //
  325 : 	///////////////////////////////
  326 : 	extension;		//Computation of the field [d1,d2]
  327 : 	[D1,D2]=[d1,d2];	//Interpolation on the coarse mesh
  328 : 
  329 : 	////////////////////////////////////
  330 : 	// Updating the step              //
  331 : 	////////////////////////////////////
  332 : 	GradNorm=int2d(Th)(prodscal(D1,D2,D1,D2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(D1)+dy(D1)*dy(D1)+dx(D2)*dx(D2)+dy(D2)*dy(D2)+D1*D1+D2*D2
  212 @ );
  333 : 	GradProduct=int2d(Th)(prodscal(D1,D2,Dprev1,Dprev2)
  211 @ 		
  212 @ 
  211 @ 		dx(D1)*dx(Dprev1)+dy(D1)*dy(Dprev1)+dx(D2)*dx(Dprev2)+dy(D2)*dy(Dprev2)+D1*Dprev1+D2*Dprev2
  212 @ );
  334 : 	if ((GradProduct<0.)&(!rollback)) {
  335 : 		actualstep=actualstep*GradNorm/(GradNorm-GradProduct)/4.; 
  336 :                 cout<<"Step too big: we step back !!!"<<endl; Th=Thprev; Sh=Shprev; rollback=true;}
  337 : 	else 
  338 : 		rollback=false;
  339 : 	if ((GradProduct>0.)&(GradProduct<(GradNorm/2.))){
  340 : 		actualstep=actualstep*2.*GradNorm/(2.*GradNorm-GradProduct); 
  341 :                 cout<<"We increase the step size"<<endl;};
  342 : 	if (GradProduct>(GradNorm/2.)){
  343 : 		actualstep=actualstep*4./3.;
  344 : 		cout<<"We increase the step size"<<endl;};
  345 : 	if(maxstep>0.) 
  346 : 		actualstep=min(actualstep,maxstep);
  347 : 	Thprev=Th;	//We keep a copy of the meshs (in case of backup at the next loop's step)
  348 : 	Shprev=Sh;
  349 : 
  350 : 	//////////////////////////////////
  351 : 	// We move the coarse mesh Th   //
  352 : 	//////////////////////////////////
  353 : 	if (!rollback){
  354 : 		real aa,minaire=checkmovemesh (Th,[x,y])/10000.;
  355 : 		while (minaire > (aa=checkmovemesh(Th,[x+actualstep*D1,y+actualstep*D2])) ){
  356 :   			cout << " problem reversed triangle  => actualstep= actual
  ... : step/2. "<<endl; 
  357 : 			actualstep= actualstep/2.;
  358 : 					}
  359 : 		Th = movemesh (Th,[x+actualstep*D1,y+actualstep*D2]);
  360 : 		cout<<"Mesh moved"<<endl;
  361 : 		cout<<"Actual Step "<<actualstep<<"------------------------------------"<<endl;
  362 : 		[Dprev1,Dprev2]=[0,0];
  363 : 		Dprev1[]=D1[];Dprev2[]=D2[];
  364 : 		[Uprev1,Uprev2]=[0,0]; Uprev1[]=U1[]; Uprev2[]=U2[]; //Interpolation of u on the new mesh Th
  365 : 		};
  366 : 
  367 : 	//////////////////////
  368 : 	// Mesh Adaptation  //
  369 : 	//////////////////////
  370 : 	if (rollback){Sh=Shprev; } 		//We step back
  371 : 	else {
  372 : 		cout<<"Mesh adaptation of Sh"<<endl;
  373 : 		Sh=adaptmesh(Th,Uprev1,Uprev2,[Dprev1,Dprev2],err=errelas);
  374 : 		plot(Sh,wait=0);
  375 : 		cout<<"Mesh adaptation of the coarse mesh Th"<<endl;
  376 : 		Th=adaptmesh(Sh,metricmsh,0,metricmsh,IsMetric=1,ratio=0,omega=200,splitpbedge=1,hmin=0.05,abserror=1); }
  377 : 	cout<<"Mesh adaptation done"<<endl;
  378 : };
  379 : ///// END OF THE OPTIMIZATION LOOP /////
  380 : 
  381 : // Back-up    ///////////////////////////////////////////////
  382 : if (nsave!=0) {
  383 : 	//We save the meshes
  384 : 		savemesh(Sh,backupname+".msh");
  385 : 		savemesh(Shprev,backupname+"-prev.msh");
  386 : 		savemesh(Th,backupname+"-geo.msh");
  387 : 		savemesh(Th,backupname+"-geo-prev.msh");
  388 : 	//We save all variables
  389 : 		{ofstream f(backupname+".txt");
  390 : 		f << volume0<<"\n";	//Initial Volume
  391 : 		f <<lagrange<<"\n";	//Lagrange Multiplier
  392 : 		f <<actualstep<<"\n";	//Actual step
  393 : 		f <<rollback<<"\n";	//boolean variable
  394 : 		f <<iter<<"\n";		//Current Iteration
  395 : 		f <<nsaved+1<<"\n";	//Number of back-up done
  396 : 		f <<isoval<<"\n";
  397 : 		[Dprev1,Dprev2]=[Dprev1,Dprev2];
  398 : 		f <<Dprev1[]<<endl;f<<Dprev2[]<<endl;};
  399 : 	nsaved=nsaved+1;
  400 : 	elasticity;
  401 : 	gradient=-(gradientexp
  203 @ 	
  204 @ 
  203 @ 	-2.*mu*(dx(u1)^2+dy(u2)^2+((dx(u2)+dy(u1))^2)/2.)-lambda*(dx(u1)+dy(u2))^2
  204 @ );
  402 : 	compliance=int1d(Sh,neumann)(g1*u1+g2*u2);
  403 : 	cout<<"Compliance : "<<compliance<<"-------------------------------------"<<endl;
  404 : 	gradient=gradient*cut;
  405 : 	volume=int2d(Sh)(1.);
  406 : 	perimeter=int1d(Sh,free)(cut);
  407 : 	lagrange=0.5*lagrange+0.5*int1d(Sh,free)(gradient)/perimeter+lagrangestep*(volume-volume0)/volume0;
  408 : 	gradient=gradient-lagrange*constrained*cut;
  409 : 	//Graphic output of the gradient
  410 : 		caption="Iteration "+iter+", Compliance ="+compliance+", Volume="+volume;
  411 : 		backupnameNb=backupname+nsaved+".eps";
  412 : 		plot(gradient,fill=1,value=0,cmm=caption,viso=isoval,ps="output/"+ backupnameNb);
  413 : };
  414 :  sizestack + 1024 =11416  ( 10392 )

  --  mesh:  Nb of Triangles =  38614, Nb of Vertices 19850
  -- Solve : 
          min 0  max 2.22507e-308
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 368 , h  min 0.0296566 , h max 0.347938
     area =  1.8166 , M area = 129.696 , M area/( |Khat| nt) 0.813914
     infiny-regularity:  min 0.180404  max 2.0595
     anisomax  5.11677, beta max = 2.36788 min  0.777545
  --  mesh:  Nb of Triangles =    368, Nb of Vertices 246
  -- Solve : 
          min 0  max 2.22507e-308
Iteration 1 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -1.14832  max 0.954346
Mesh moved
Actual Step 0.2------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 743 , h  min 0.00285814 , h max 0.277343
     area =  2.24485 , M area = 312.087 , M area/( |Khat| nt) 0.970031
     infiny-regularity:  min 0.152748  max 2.76616
     anisomax  9.29738, beta max = 2.74971 min  0.667586
  --  mesh:  Nb of Triangles =    743, Nb of Vertices 467
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 369 , h  min 0.00142907 , h max 0.506477
     area =  2.25228 , M area = 43.8428 , M area/( |Khat| nt) 0.274392
     infiny-regularity:  min 0.000418785  max 8.49304
     anisomax  115.906, beta max = 511.953 min  0.426146
  --  mesh:  Nb of Triangles =    369, Nb of Vertices 243
Mesh adaptation done
Iteration 2 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -2.38488  max 2.20554
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0324436------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 346 , h  min 0.00119168 , h max 0.549847
     area =  2.42046 , M area = 85.9917 , M area/( |Khat| nt) 0.573958
     infiny-regularity:  min 0.00655777  max 5.26847
     anisomax  74.1739, beta max = 54.6761 min  0.522261
  --  mesh:  Nb of Triangles =    346, Nb of Vertices 240
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 312 , h  min 0.000595841 , h max 0.623071
     area =  2.425 , M area = 19.849 , M area/( |Khat| nt) 0.146921
     infiny-regularity:  min 0.00046456  max 16.3498
     anisomax  342.583, beta max = 754.091 min  0.612675
  --  mesh:  Nb of Triangles =    312, Nb of Vertices 206
Mesh adaptation done
Iteration 3 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.00814  max 2.63995
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.0216291------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 358 , h  min 0.000416701 , h max 0.562757
     area =  2.56037 , M area = 60.0148 , M area/( |Khat| nt) 0.387146
     infiny-regularity:  min 0.00270073  max 5.03899
     anisomax  72.0023, beta max = 107.994 min  0.555288
  --  mesh:  Nb of Triangles =    358, Nb of Vertices 237
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 293 , h  min 0.000280789 , h max 0.609707
     area =  2.56648 , M area = 13.9169 , M area/( |Khat| nt) 0.109692
     infiny-regularity:  min 0.000196698  max 10.7357
     anisomax  629.713, beta max = 99.6418 min  0.853607
  --  mesh:  Nb of Triangles =    293, Nb of Vertices 193
Mesh adaptation done
Iteration 4 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.39105  max 2.93516
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00360485------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 317 , h  min 0.000424521 , h max 0.636418
     area =  2.59041 , M area = 31.6685 , M area/( |Khat| nt) 0.230711
     infiny-regularity:  min 0.00209682  max 3.8532
     anisomax  611.402, beta max = 128.041 min  0.695296
  --  mesh:  Nb of Triangles =    317, Nb of Vertices 209
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 279 , h  min 0.00021226 , h max 0.614994
     area =  2.59217 , M area = 14.4027 , M area/( |Khat| nt) 0.119217
     infiny-regularity:  min 0.000301757  max 8.80101
     anisomax  846.024, beta max = 90.3531 min  0.662657
  --  mesh:  Nb of Triangles =    279, Nb of Vertices 185
Mesh adaptation done
Iteration 5 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.46341  max 3.2358
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00240323------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 292 , h  min 0.000204325 , h max 0.691487
     area =  2.61284 , M area = 6.13225 , M area/( |Khat| nt) 0.0484994
     infiny-regularity:  min 0.000210416  max 1.09746
     anisomax  889.494, beta max = 334.935 min  1.72188
  --  mesh:  Nb of Triangles =    292, Nb of Vertices 190
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 286 , h  min 0.000204325 , h max 0.618845
     area =  2.61071 , M area = 13.8491 , M area/( |Khat| nt) 0.111829
     infiny-regularity:  min 0.000344362  max 1.75985
     anisomax  889.494, beta max = 87.4141 min  0.811857
  --  mesh:  Nb of Triangles =    286, Nb of Vertices 189
Mesh adaptation done
Iteration 6 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.43226  max 3.35486
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.00160215------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 286 , h  min 0.000390808 , h max 0.585351
     area =  2.62199 , M area = 40.509 , M area/( |Khat| nt) 0.327103
     infiny-regularity:  min 0.00172416  max 2.85691
     anisomax  2203.4, beta max = 115.392 min  0.742322
  --  mesh:  Nb of Triangles =    286, Nb of Vertices 200
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 271 , h  min 0.000195404 , h max 0.570753
     area =  2.62269 , M area = 14.2675 , M area/( |Khat| nt) 0.121585
     infiny-regularity:  min 0.000434759  max 7.35833
     anisomax  1100.99, beta max = 87.1873 min  0.835243
  --  mesh:  Nb of Triangles =    271, Nb of Vertices 180
Mesh adaptation done
Iteration 7 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.52712  max 3.3685
We increase the step size
 problem reversed triangle  => actualstep= actualstep/2. 
 problem reversed triangle  => actualstep= actualstep/2. 
Mesh moved
Actual Step 0.000436453------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 286 , h  min 0.000194751 , h max 0.693229
     area =  2.62685 , M area = 6.16451 , M area/( |Khat| nt) 0.0497774
     infiny-regularity:  min 0.000296763  max 1.10016
     anisomax  997.617, beta max = 146.767 min  1.66004
  --  mesh:  Nb of Triangles =    286, Nb of Vertices 186
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 256 , h  min 0.000194751 , h max 0.571466
     area =  2.6244 , M area = 13.122 , M area/( |Khat| nt) 0.118375
     infiny-regularity:  min 0.000433175  max 1.27871
     anisomax  944.155, beta max = 87.1256 min  1.02059
  --  mesh:  Nb of Triangles =    256, Nb of Vertices 172
Mesh adaptation done
Iteration 8 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.53552  max 3.36957
We increase the step size
Mesh moved
Actual Step 0.000581938------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 286 , h  min 0.000191446 , h max 0.693755
     area =  2.63112 , M area = 6.17454 , M area/( |Khat| nt) 0.0498583
     infiny-regularity:  min 0.000291415  max 1.10099
     anisomax  999.315, beta max = 147.002 min  1.68219
  --  mesh:  Nb of Triangles =    286, Nb of Vertices 186
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 250 , h  min 0.000191446 , h max 0.572417
     area =  2.62867 , M area = 13.1433 , M area/( |Khat| nt) 0.121413
     infiny-regularity:  min 0.000425368  max 1.33744
     anisomax  964.014, beta max = 87.0497 min  0.875249
  --  mesh:  Nb of Triangles =    250, Nb of Vertices 169
Mesh adaptation done
Iteration 9 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.50034  max 3.42266
We increase the step size
Mesh moved
Actual Step 0.000639599------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 286 , h  min 0.000188031 , h max 0.694335
     area =  2.63604 , M area = 6.1858 , M area/( |Khat| nt) 0.0499493
     infiny-regularity:  min 0.000285844  max 1.10188
     anisomax  1001.15, beta max = 147.222 min  1.67218
  --  mesh:  Nb of Triangles =    286, Nb of Vertices 186
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 262 , h  min 0.000188031 , h max 0.623802
     area =  2.63358 , M area = 13.1679 , M area/( |Khat| nt) 0.116068
     infiny-regularity:  min 0.000417247  max 1.52253
     anisomax  985.635, beta max = 86.9576 min  0.793527
  --  mesh:  Nb of Triangles =    262, Nb of Vertices 175
Mesh adaptation done
Iteration 10 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.61641  max 3.22402
We increase the step size
Mesh moved
Actual Step 0.000852799------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 286 , h  min 0.000183279 , h max 0.695072
     area =  2.64214 , M area = 6.2002 , M area/( |Khat| nt) 0.0500655
     infiny-regularity:  min 0.000278086  max 1.10309
     anisomax  1017.07, beta max = 147.578 min  1.62583
  --  mesh:  Nb of Triangles =    286, Nb of Vertices 186
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 256 , h  min 0.000183279 , h max 0.574851
     area =  2.63967 , M area = 13.1983 , M area/( |Khat| nt) 0.119063
     infiny-regularity:  min 0.000405919  max 1.31848
     anisomax  1017.07, beta max = 86.8496 min  0.998883
  --  mesh:  Nb of Triangles =    256, Nb of Vertices 172
Mesh adaptation done
Iteration 11 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.52212  max 3.43713
We increase the step size
Mesh moved
Actual Step 0.00113707------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 309 , h  min 0.000177642 , h max 0.597673
     area =  2.64695 , M area = 27.6899 , M area/( |Khat| nt) 0.206948
     infiny-regularity:  min 9.61683e-05  max 1.89218
     anisomax  1527.65, beta max = 316.068 min  0.888459
  --  mesh:  Nb of Triangles =    309, Nb of Vertices 206
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 246 , h  min 0.000177642 , h max 0.626879
     area =  2.64846 , M area = 13.4701 , M area/( |Khat| nt) 0.126455
     infiny-regularity:  min 0.000392253  max 1.58153
     anisomax  1057.95, beta max = 86.6853 min  0.853988
  --  mesh:  Nb of Triangles =    246, Nb of Vertices 167
Mesh adaptation done
Iteration 12 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.58504  max 3.40729
We increase the step size
Mesh moved
Actual Step 0.00151609------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 283 , h  min 0.000172132 , h max 0.697466
     area =  2.66358 , M area = 6.25 , M area/( |Khat| nt) 0.0510027
     infiny-regularity:  min 0.000259381  max 1.1068
     anisomax  1103.55, beta max = 148.302 min  1.71587
  --  mesh:  Nb of Triangles =    283, Nb of Vertices 184
Mesh adaptation of the coarse mesh Th
  number of required edges : 0
  -- adaptmesh Regulary:  Nb triangles 253 , h  min 0.000172132 , h max 0.635634
     area =  2.66106 , M area = 13.3053 , M area/( |Khat| nt) 0.121452
     infiny-regularity:  min 0.000378631  max 1.53652
     anisomax  1103.55, beta max = 86.4751 min  0.795482
  --  mesh:  Nb of Triangles =    253, Nb of Vertices 170
Mesh adaptation done
Iteration 13 ----------------------------------------
  -- Solve : 
          min 0  max 2.22507e-308
Compliance :0-------------------------------------
  number of required edges : 0
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve : 
          min -3.65356  max 3.26054
We increase the step size
Mesh moved
Actual Step 0.00202145------------------------------------
Mesh adaptation of Sh
  number of required edges : 0
 We lost 2  other edges 91
 Fatal error in the mesh generator 1100
  current line = 373
Meshing error: Bamg
 number : 1100, 
Meshing error: Bamg
 number : 1100, 
 err code 5 ,  mpirank 0
